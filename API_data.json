{
  "bigg": {
    "download": {
      "Parameters": [
        {
          "name": "model_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Identifier of the model to download."
        },
        {
          "name": "format_",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format for the downloaded file; options: 'xml', 'json', 'mat'."
        },
        {
          "name": "gzip",
          "type": "bool",
          "default": "True",
          "optional": true,
          "description": "Specify if the file should be gzipped."
        },
        {
          "name": "target",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Path where the downloaded file will be stored."
        }
      ],
      "Returns": {
        "type": "None",
        "description": "This function does not return a value but saves the downloaded file locally."
      },
      "api_type": "method",
      "api_name": "bioservices.BiGG.download",
      "api_calling": "bioservices.BiGG.download(model_id=$, format_=$, gzip=$, target=$)",
      "example": "bioservices.BiGG.download(model_id='e_coli_core', format_='json', gzip=True, target='e_coli_core.json.gz')",
      "description": "Downloads a specified BiGG model dataset in the requested format and saves it locally.",
      "Docstring": "Downloads a specified BiGG model dataset in the requested format and saves it locally.\n\nParameters:\n-----------\nmodel_id : str\n    Identifier of the model to download.\nformat_ : str, optional\n    Format for the downloaded file; options: 'xml', 'json', 'mat'.\ngzip : bool, optional\n    Specify if the file should be gzipped.\ntarget : str, optional\n    Path where the downloaded file will be stored.\n\nReturns:\n--------\nNone\n    This function does not return a value but saves the downloaded file locally.\n\nExamples:\n--------\n>>> bioservices.BiGG.download(model_id='e_coli_core', format_='json', gzip=True, target='e_coli_core.json.gz')"
    },
    "genes": {
      "Parameters": [
        {
          "name": "model_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the model to retrieve genes from."
        },
        {
          "name": "ids",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "Specific list of IDs to fetch information for."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of details for genes associated with the provided model_id."
      },
      "api_type": "method",
      "api_name": "bioservices.BiGG.genes",
      "api_calling": "bioservices.BiGG.genes(model_id=$, ids=$)",
      "example": "bioservices.BiGG.genes(model_id=\"e_coli_core\", ids=None)",
      "description": "Fetch gene information for a specified model.",
      "Docstring": "Fetch gene information for a specified model.\n\nParameters:\n-----------\nmodel_id : str\n    The identifier of the model to retrieve genes from.\nids : list[str], optional\n    Specific list of IDs to fetch information for.\n\nReturns:\n--------\nlist[dict]\n    A list of details for genes associated with the provided model_id.\n\nExamples:\n--------\n>>> bioservices.BiGG.genes(model_id=\"e_coli_core\", ids=None)"
    },
    "metabolites": {
      "Parameters": [
        {
          "name": "model_id",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "The identifier of the model to query metabolites from; required when IDs are provided."
        },
        {
          "name": "ids",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "A list of metabolite IDs to retrieve; if None, all metabolites are returned."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of metabolite details, with each entry containing properties of a metabolite."
      },
      "api_type": "method",
      "api_name": "bioservices.BiGG.metabolites",
      "api_calling": "bioservices.BiGG.metabolites(model_id=$, ids=$)",
      "example": "bioservices.BiGG.metabolites(model_id=\"e_coli_core\", ids=[\"glc__D_e\", \"atp_c\"])",
      "description": "Retrieve a list of metabolites for a specific model or universally available metabolites.",
      "Docstring": "Retrieve a list of metabolites for a specific model or universally available metabolites.\n\nParameters:\n-----------\nmodel_id : str, optional\n    The identifier of the model to query metabolites from; required when IDs are provided.\nids : list[str], optional\n    A list of metabolite IDs to retrieve; if None, all metabolites are returned.\n\nReturns:\n--------\nlist[dict]\n    A list of metabolite details, with each entry containing properties of a metabolite.\n\nExamples:\n--------\n>>> bioservices.BiGG.metabolites(model_id=\"e_coli_core\", ids=[\"glc__D_e\", \"atp_c\"])"
    },
    "models": {
      "Parameters": [],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of available models in the BiGG database, including metadata for each."
      },
      "api_type": "property",
      "api_name": "bioservices.BiGG.models",
      "api_calling": "bioservices.BiGG.models",
      "example": "bioservices.BiGG.models",
      "description": "Retrieve a list of available genome-scale metabolic models in the BiGG database.",
      "Docstring": "Retrieve a list of available genome-scale metabolic models in the BiGG database.\n\n\nReturns:\n--------\nlist[dict]\n    A list of available models in the BiGG database, including metadata for each.\n\nExamples:\n--------\n>>> bioservices.BiGG.models"
    },
    "reactions": {
      "Parameters": [
        {
          "name": "model_id",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "The identifier of the metabolic model. If not provided, queries the universal reactions."
        },
        {
          "name": "ids",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "Specific reaction identifiers to retrieve if available."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of reactions matching the specified query parameters."
      },
      "api_type": "method",
      "api_name": "bioservices.BiGG.reactions",
      "api_calling": "bioservices.BiGG.reactions(model_id=$, ids=$)",
      "example": "bioservices.BiGG.reactions(model_id=\"e_coli_core\", ids=[\"ACALD\", \"GLNS\", \"ME1\", \"GLCpts\", \"AKGDH\"])",
      "description": "Retrieve reaction information from a specified metabolic model.",
      "Docstring": "Retrieve reaction information from a specified metabolic model.\n\nParameters:\n-----------\nmodel_id : str, optional\n    The identifier of the metabolic model. If not provided, queries the universal reactions.\nids : list[str], optional\n    Specific reaction identifiers to retrieve if available.\n\nReturns:\n--------\nlist[dict]\n    A list of reactions matching the specified query parameters.\n\nExamples:\n--------\n>>> bioservices.BiGG.reactions(model_id=\"e_coli_core\", ids=[\"ACALD\", \"GLNS\", \"ME1\", \"GLCpts\", \"AKGDH\"])"
    },
    "search": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search term to query the BiGG Models database."
        },
        {
          "name": "type_",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The category to search under; acceptable values include 'models', 'metabolites', 'reactions', and 'genes'."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list containing the search results, each represented as a dictionary of details."
      },
      "api_type": "method",
      "api_name": "bioservices.BiGG.search",
      "api_calling": "bioservices.BiGG.search(query=$, type_=$)",
      "example": "bioservices.BiGG.search(query=\"e coli\", type_=\"models\")",
      "description": "Search for items in the BiGG Models database matching the given query and type.",
      "Docstring": "Search for items in the BiGG Models database matching the given query and type.\n\nParameters:\n-----------\nquery : str\n    The search term to query the BiGG Models database.\ntype_ : str\n    The category to search under; acceptable values include 'models', 'metabolites', 'reactions', and 'genes'.\n\nReturns:\n--------\nlist[dict]\n    A list containing the search results, each represented as a dictionary of details.\n\nExamples:\n--------\n>>> bioservices.BiGG.search(query=\"e coli\", type_=\"models\")"
    },
    "version": {
      "Parameters": [],
      "Returns": {
        "type": "str",
        "description": "The version of the BiGG API database."
      },
      "api_type": "property",
      "api_name": "bioservices.BiGG.version",
      "api_calling": "bioservices.BiGG.version",
      "example": "bioservices.BiGG.version",
      "description": "Retrieve the version of the BiGG API database.",
      "Docstring": "Retrieve the version of the BiGG API database.\n\n\nReturns:\n--------\nstr\n    The version of the BiGG API database.\n\nExamples:\n--------\n>>> bioservices.BiGG.version"
    }
  },
  "biodbnet": {
    "db2db": {
      "Parameters": [
        {
          "name": "input_db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Input database, specifying the type of data source to map from."
        },
        {
          "name": "output_db",
          "type": "list[str]",
          "default": null,
          "optional": false,
          "description": "List of databases to map the input identifiers to the corresponding outputs."
        },
        {
          "name": "input_values",
          "type": "list[str]",
          "default": null,
          "optional": false,
          "description": "List of identifiers to be converted based on the defined mapping rules."
        },
        {
          "name": "taxon",
          "type": "int",
          "default": "9606",
          "optional": true,
          "description": "NCBI Taxonomy ID for the conversion operation. Default is 9606 (Homo sapiens)."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "A DataFrame where the index corresponds to input database identifiers and columns contain identifiers for each output database."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.db2db",
      "api_calling": "bioservices.BioDBNet.db2db(input_db=$, output_db=$, input_values=$, taxon=$)",
      "example": "bioservices.BioDBNet.db2db(input_db='Ensembl Gene ID', output_db=['Gene Symbol'], input_values=['ENSG00000121410', 'ENSG00000171428'], taxon=9606)",
      "description": "Converts identifiers from an input database to identifiers in one or more output databases.",
      "Docstring": "Converts identifiers from an input database to identifiers in one or more output databases.\n\nParameters:\n-----------\ninput_db : str\n    Input database, specifying the type of data source to map from.\noutput_db : list[str]\n    List of databases to map the input identifiers to the corresponding outputs.\ninput_values : list[str]\n    List of identifiers to be converted based on the defined mapping rules.\ntaxon : int, optional\n    NCBI Taxonomy ID for the conversion operation. Default is 9606 (Homo sapiens).\n\nReturns:\n--------\npandas.DataFrame\n    A DataFrame where the index corresponds to input database identifiers and columns contain identifiers for each output database.\n\nExamples:\n--------\n>>> bioservices.BioDBNet.db2db(input_db='Ensembl Gene ID', output_db=['Gene Symbol'], input_values=['ENSG00000121410', 'ENSG00000171428'], taxon=9606)"
    },
    "dbFind": {
      "_issues": [
        "Make sure to >>> dbnet.services.settings.TIMEOUT = 30 before running the command to avoid timeout issues."
      ],
      "Parameters": [
        {
          "name": "output_db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Valid database name."
        },
        {
          "name": "input_values",
          "type": "list[str]",
          "default": null,
          "optional": false,
          "description": "List of identifiers to look for."
        },
        {
          "name": "taxon",
          "type": "str",
          "default": "'9606'",
          "optional": true,
          "description": "Taxonomy identifier; defaults to 9606 for Homo sapiens."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "A dataframe indexed by input values with the results and identifier types."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.dbFind",
      "api_calling": "bioservices.BioDBNet.dbFind(output_db=$, input_values=$, taxon=$)",
      "example": "bioservices.BioDBNet.dbFind(output_db=\"Gene ID\", input_values=[\"ZMYM6_HUMAN\", \"NP_710159\"], taxon=\"9606\")",
      "description": "The dbFind function identifies and characterizes types of input identifiers, converting them to the specified output database if applicable.",
      "Docstring": "The dbFind function identifies and characterizes types of input identifiers, converting them to the specified output database if applicable.\n\nParameters:\n-----------\noutput_db : str\n    Valid database name.\ninput_values : list[str]\n    List of identifiers to look for.\ntaxon : str, optional\n    Taxonomy identifier; defaults to 9606 for Homo sapiens.\n\nReturns:\n--------\npandas.DataFrame\n    A dataframe indexed by input values with the results and identifier types.\n\nExamples:\n--------\n>>> bioservices.BioDBNet.dbFind(output_db=\"Gene ID\", input_values=[\"ZMYM6_HUMAN\", \"NP_710159\"], taxon=\"9606\")"
    },
    "dbOrtho": {
      "Parameters": [
        {
          "name": "input_db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Input database to map identifiers from."
        },
        {
          "name": "output_db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Output database to map identifiers to."
        },
        {
          "name": "input_values",
          "type": "list[str]",
          "default": null,
          "optional": false,
          "description": "List of identifiers to convert."
        },
        {
          "name": "input_taxon",
          "type": "int",
          "default": null,
          "optional": false,
          "description": "Taxonomic ID of the input organism."
        },
        {
          "name": "output_taxon",
          "type": "int",
          "default": null,
          "optional": false,
          "description": "Taxonomic ID of the output organism."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "Dataframe mapping the input identifiers to the corresponding output data."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.dbOrtho",
      "api_calling": "bioservices.BioDBNet.dbOrtho(input_db=$, output_db=$, input_values=$, input_taxon=$, output_taxon=$)",
      "example": "bioservices.BioDBNet.dbOrtho(input_db=\"Gene Symbol\", output_db=\"Gene ID\", input_values=[\"MYC\", \"MTOR\", \"A1BG\"], input_taxon=9606, output_taxon=10090)",
      "description": "Converts identifiers from one species to a corresponding identifier set of another species.",
      "Docstring": "Converts identifiers from one species to a corresponding identifier set of another species.\n\nParameters:\n-----------\ninput_db : str\n    Input database to map identifiers from.\noutput_db : str\n    Output database to map identifiers to.\ninput_values : list[str]\n    List of identifiers to convert.\ninput_taxon : int\n    Taxonomic ID of the input organism.\noutput_taxon : int\n    Taxonomic ID of the output organism.\n\nReturns:\n--------\npandas.DataFrame\n    Dataframe mapping the input identifiers to the corresponding output data.\n\nExamples:\n--------\n>>> bioservices.BioDBNet.dbOrtho(input_db=\"Gene Symbol\", output_db=\"Gene ID\", input_values=[\"MYC\", \"MTOR\", \"A1BG\"], input_taxon=9606, output_taxon=10090)"
    },
    "dbReport": {
      "Parameters": [
        {
          "name": "input_db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Input database to be queried."
        },
        {
          "name": "input_values",
          "type": "list[str]",
          "default": null,
          "optional": false,
          "description": "List of identifiers from the input database."
        },
        {
          "name": "taxon",
          "type": "int",
          "default": "9606",
          "optional": true,
          "description": "Taxonomy ID for narrowing the reporting scope."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "Dataframe where the index corresponds to input database identifiers and the columns contain identifiers from all possible databases."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.dbReport",
      "api_calling": "bioservices.BioDBNet.dbReport(input_db=$, input_values=$, taxon=$)",
      "example": "bioservices.BioDBNet.dbReport(input_db=\"Ensembl Gene ID\", input_values=[\"ENSG00000121410\", \"ENSG00000171428\"], taxon=9606)",
      "description": "Same as db2db() but retrieves results for all accessible databases from the provided input database and identifiers.",
      "Docstring": "Same as db2db() but retrieves results for all accessible databases from the provided input database and identifiers.\n\nParameters:\n-----------\ninput_db : str\n    Input database to be queried.\ninput_values : list[str]\n    List of identifiers from the input database.\ntaxon : int, optional\n    Taxonomy ID for narrowing the reporting scope.\n\nReturns:\n--------\npandas.DataFrame\n    Dataframe where the index corresponds to input database identifiers and the columns contain identifiers from all possible databases.\n\nExamples:\n--------\n>>> bioservices.BioDBNet.dbReport(input_db=\"Ensembl Gene ID\", input_values=[\"ENSG00000121410\", \"ENSG00000171428\"], taxon=9606)"
    },
    "dbWalk": {
      "Parameters": [
        {
          "name": "db_path",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Path to follow in the databases, detailing the node connections."
        },
        {
          "name": "input_values",
          "type": "list[str]",
          "default": null,
          "optional": false,
          "description": "List of input identifiers for processing."
        },
        {
          "name": "taxon",
          "type": "int",
          "default": "9606",
          "optional": true,
          "description": "Taxonomy identifier, defaulting to 9606 (Homo sapiens)."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "DataFrame where columns correspond to the nodes in the path."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.dbWalk",
      "api_calling": "bioservices.BioDBNet.dbWalk(db_path=$, input_values=$, taxon=$)",
      "example": "bioservices.BioDBNet.dbWalk(db_path='Ensembl Gene ID->Gene ID->Homolog - Mouse Gene ID->Ensembl Gene ID', input_values=['ENSG00000175899'], taxon=9606)",
      "description": "Walk through the biological database network with a specified path of node connections.",
      "Docstring": "Walk through the biological database network with a specified path of node connections.\n\nParameters:\n-----------\ndb_path : str\n    Path to follow in the databases, detailing the node connections.\ninput_values : list[str]\n    List of input identifiers for processing.\ntaxon : int, optional\n    Taxonomy identifier, defaulting to 9606 (Homo sapiens).\n\nReturns:\n--------\npandas.DataFrame\n    DataFrame where columns correspond to the nodes in the path.\n\nExamples:\n--------\n>>> bioservices.BioDBNet.dbWalk(db_path='Ensembl Gene ID->Gene ID->Homolog - Mouse Gene ID->Ensembl Gene ID', input_values=['ENSG00000175899'], taxon=9606)"
    },
    "getDirectOutputsForInput": {
      "Parameters": [
        {
          "name": "input_db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The input database identifier, provided as a string."
        }
      ],
      "Returns": {
        "type": "list[str]",
        "description": "A list containing all direct output nodes accessible via a single edge connection from the specified input node."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.getDirectOutputsForInput",
      "api_calling": "bioservices.BioDBNet.getDirectOutputsForInput(input_db=$)",
      "example": "bioservices.BioDBNet.getDirectOutputsForInput(input_db=\"genesymbol\")",
      "description": "Gets all the direct output nodes for a given input node.",
      "Docstring": "Gets all the direct output nodes for a given input node.\n\nParameters:\n-----------\ninput_db : str\n    The input database identifier, provided as a string.\n\nReturns:\n--------\nlist[str]\n    A list containing all direct output nodes accessible via a single edge connection from the specified input node.\n\nExamples:\n--------\n>>> bioservices.BioDBNet.getDirectOutputsForInput(input_db=\"genesymbol\")"
    },
    "getInputs": {
      "Parameters": [],
      "Returns": {
        "type": "list[str]",
        "description": "A list of available input databases."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.getInputs",
      "api_calling": "bioservices.BioDBNet.getInputs()",
      "example": "s.getInputs()",
      "description": "Retrieve the list of available input databases.",
      "Docstring": "Retrieve the list of available input databases.\n\n\nReturns:\n--------\nlist[str]\n    A list of available input databases.\n\nExamples:\n--------\n>>> s.getInputs()"
    },
    "getOutputsForInput": {
      "Parameters": [
        {
          "name": "input_db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The input database from which to retrieve possible output databases."
        }
      ],
      "Returns": {
        "type": "list[str]",
        "description": "A list of output databases that are compatible as outputs for the given input database."
      },
      "api_type": "method",
      "api_name": "bioservices.BioDBNet.getOutputsForInput",
      "api_calling": "bioservices.BioDBNet.getOutputsForInput(input_db=$)",
      "example": "bioservices.BioDBNet.getOutputsForInput(input_db='UniProt Accession')",
      "description": "Retrieve the list of possible output databases for a specified input database.\\n\\nParameters:\\n-----------\\ninput_db : str\\n   The input database from which to retrieve possible output databases.\\n\\nReturns:\\n--------\\nlist\\n   A list of output databases that are compatible as outputs with the given input database.\\n\\nExamples:\\n--------\\n>>> s.getOutputsForInput('UniProt Accession')\\n['PDB ID', 'RefSeq Protein Accession', 'Gene Symbol']",
      "Docstring": "Retrieve the list of possible output databases for a specified input database.\\n\\nParameters:\\n-----------\\ninput_db : str\\n   The input database from which to retrieve possible output databases.\\n\\nReturns:\\n--------\\nlist\\n   A list of output databases that are compatible as outputs with the given input database.\\n\\nExamples:\\n--------\\n>>> s.getOutputsForInput('UniProt Accession')\\n['PDB ID', 'RefSeq Protein Accession', 'Gene Symbol']\n\nParameters:\n-----------\ninput_db : str\n    The input database from which to retrieve possible output databases.\n\nReturns:\n--------\nlist[str]\n    A list of output databases that are compatible as outputs for the given input database.\n\nExamples:\n--------\n>>> bioservices.BioDBNet.getOutputsForInput(input_db='UniProt Accession')"
    }
  },
  "biogrid": {},
  "chebi": {
    "conv": {
      "Parameters": [
        {
          "name": "chebiId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid ChEBI identifier (string)."
        },
        {
          "name": "target",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the database to retrieve the entity from."
        }
      ],
      "Returns": {
        "type": "list[str]",
        "description": "A list of strings containing database identifiers associated with the provided target."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEBI.conv",
      "api_calling": "bioservices.ChEBI.conv(chebiId=$, target=$)",
      "example": "bioservices.ChEBI.conv(chebiId=\"CHEBI:10102\", target=\"KEGG COMPOUND accession\")",
      "description": "Calls `getCompleteEntity` and retrieves the database identifier for a specific CheBI entry based on the given database target.",
      "Docstring": "Calls `getCompleteEntity` and retrieves the database identifier for a specific CheBI entry based on the given database target.\n\nParameters:\n-----------\nchebiId : str\n    A valid ChEBI identifier (string).\ntarget : str\n    The identifier of the database to retrieve the entity from.\n\nReturns:\n--------\nlist[str]\n    A list of strings containing database identifiers associated with the provided target.\n\nExamples:\n--------\n>>> bioservices.ChEBI.conv(chebiId=\"CHEBI:10102\", target=\"KEGG COMPOUND accession\")"
    },
    "getAllOntologyChildrenInPath": {
      "Parameters": [
        {
          "name": "chebiId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid ChEBI identifier string."
        },
        {
          "name": "relationshipType",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "One of \"is a\", \"has part\", \"has role\", \"is conjugate base of\", \"is conjugate acid of\", \"is tautomer of\", \"is enantiomer of\", \"has functional parent\", \"has parent hybride\", \"is substituent group of\"."
        },
        {
          "name": "onlyWithChemicalStructure",
          "type": "bool",
          "default": "False",
          "optional": true,
          "description": "If True, restrict results to entities with chemical structure information."
        }
      ],
      "Returns": {
        "type": "suds.sudsobject.LiteEntityList",
        "description": "A list (<class 'suds.sudsobject.LiteEntityList'>, treat it like a list of nested named tuples) of ontology children of the given entity based on the specified criteria."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEBI.getAllOntologyChildrenInPath",
      "api_calling": "bioservices.ChEBI.getAllOntologyChildrenInPath(chebiId=$, relationshipType=$, onlyWithChemicalStructure=$)",
      "example": "bioservices.ChEBI.getAllOntologyChildrenInPath(chebiId=\"CHEBI:27732\", relationshipType=\"has part\", onlyWithChemicalStructure=False)",
      "description": "Retrieves the ontology children of an entity including the specified relationship type.",
      "Docstring": "Retrieves the ontology children of an entity including the specified relationship type.\n\nParameters:\n-----------\nchebiId : str\n    A valid ChEBI identifier string.\nrelationshipType : str\n    One of \"is a\", \"has part\", \"has role\", \"is conjugate base of\", \"is conjugate acid of\", \"is tautomer of\", \"is enantiomer of\", \"has functional parent\", \"has parent hybride\", \"is substituent group of\".\nonlyWithChemicalStructure : bool, optional\n    If True, restrict results to entities with chemical structure information.\n\nReturns:\n--------\nsuds.sudsobject.LiteEntityList\n    A list (<class 'suds.sudsobject.LiteEntityList'>, treat it like a list of nested named tuples) of ontology children of the given entity based on the specified criteria.\n\nExamples:\n--------\n>>> bioservices.ChEBI.getAllOntologyChildrenInPath(chebiId=\"CHEBI:27732\", relationshipType=\"has part\", onlyWithChemicalStructure=False)"
    },
    "getCompleteEntity": {
      "Parameters": [
        {
          "name": "chebiId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid ChEBI identifier as a string."
        }
      ],
      "Returns": {
        "type": "suds.sudsobject.Entity",
        "description": "A list (<class 'suds.sudsobject.Entity'>, treat it like a nested named tuple) containing fields like mass, names, and SMILES."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEBI.getCompleteEntity",
      "api_calling": "bioservices.ChEBI.getCompleteEntity(chebiId=$)",
      "example": "bioservices.ChEBI.getCompleteEntity(chebiId=\"CHEBI:27732\")",
      "description": "\"\"\"",
      "Docstring": "\"\"\"\n\nParameters:\n-----------\nchebiId : str\n    A valid ChEBI identifier as a string.\n\nReturns:\n--------\nsuds.sudsobject.Entity\n    A list (<class 'suds.sudsobject.Entity'>, treat it like a nested named tuple) containing fields like mass, names, and SMILES.\n\nExamples:\n--------\n>>> bioservices.ChEBI.getCompleteEntity(chebiId=\"CHEBI:27732\")"
    },
    "getCompleteEntityByList": {
      "Parameters": [
        {
          "name": "chebiIdList",
          "type": "list[str]",
          "default": "[]",
          "optional": true,
          "description": "List of ChEBI accession numbers to retrieve, maximum size is 50."
        }
      ],
      "Returns": {
        "type": "list[suds.sudsobject.Entity]",
        "description": "Result list of suds.sudsobject.Entity (<class 'suds.sudsobject.Entity'>, treat it like a nested named tuple) containing complete entity information corresponding to the provided ChEBI accession numbers."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEBI.getCompleteEntityByList",
      "api_calling": "bioservices.ChEBI.getCompleteEntityByList(chebiIdList=$)",
      "example": "bioservices.ChEBI.getCompleteEntityByList(chebiIdList=[\"CHEBI:27732\"])",
      "description": "Retrieve the complete entities for a list of ChEBI accession numbers.",
      "Docstring": "Retrieve the complete entities for a list of ChEBI accession numbers.\n\nParameters:\n-----------\nchebiIdList : list[str], optional\n    List of ChEBI accession numbers to retrieve, maximum size is 50.\n\nReturns:\n--------\nlist[suds.sudsobject.Entity]\n    Result list of suds.sudsobject.Entity (<class 'suds.sudsobject.Entity'>, treat it like a nested named tuple) containing complete entity information corresponding to the provided ChEBI accession numbers.\n\nExamples:\n--------\n>>> bioservices.ChEBI.getCompleteEntityByList(chebiIdList=[\"CHEBI:27732\"])"
    },
    "getLiteEntity": {
      "Parameters": [
        {
          "name": "search",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Search string or category."
        },
        {
          "name": "searchCategory",
          "type": "str",
          "default": "'ALL'",
          "optional": true,
          "description": "Filter with category such as ALL, SMILES, etc."
        },
        {
          "name": "maximumResults",
          "type": "int",
          "default": "200",
          "optional": true,
          "description": "Maximum number of results to retrieve, default is 200."
        },
        {
          "name": "stars",
          "type": "str",
          "default": "'ALL'",
          "optional": true,
          "description": "Filter by stars: TWO ONLY, ALL, THREE ONLY."
        }
      ],
      "Returns": {
        "type": "list[suds.sudsobject.LiteEntity]",
        "description": "List of suds.sudsobject.LiteEntity (<class 'suds.sudsobject.LiteEntity'>, treat it like a nested named tuple) representing ChEBI entities matching the criteria."
      },
      "api_type": "method",
      "api_name": "bioservices.CheBI.getLiteEntity",
      "api_calling": "bioservices.CheBI.getLiteEntity(search=$, searchCategory=$, maximumResults=$, stars=$)",
      "example": "bioservices.CheBI.getLiteEntity(search=\"CHEBI:27732\", searchCategory=\"ALL\", maximumResults=10, stars=\"ALL\")",
      "description": "Retrieves a list of entities containing the ChEBI ASCII name or identifier.",
      "Docstring": "Retrieves a list of entities containing the ChEBI ASCII name or identifier.\n\nParameters:\n-----------\nsearch : str\n    Search string or category.\nsearchCategory : str, optional\n    Filter with category such as ALL, SMILES, etc.\nmaximumResults : int, optional\n    Maximum number of results to retrieve, default is 200.\nstars : str, optional\n    Filter by stars: TWO ONLY, ALL, THREE ONLY.\n\nReturns:\n--------\nlist[suds.sudsobject.LiteEntity]\n    List of suds.sudsobject.LiteEntity (<class 'suds.sudsobject.LiteEntity'>, treat it like a nested named tuple) representing ChEBI entities matching the criteria.\n\nExamples:\n--------\n>>> bioservices.CheBI.getLiteEntity(search=\"CHEBI:27732\", searchCategory=\"ALL\", maximumResults=10, stars=\"ALL\")"
    },
    "getOntologyChildren": {
      "Parameters": [
        {
          "name": "chebiId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid ChEBI identifier."
        }
      ],
      "Returns": {
        "type": "suds.sudsobject.OntologyDataItemList",
        "description": "suds.sudsobject.OntologyDataItemList (<class 'suds.sudsobject.OntologyDataItemList'>, treat it like a nested named tuples) representing the ontology children of the specified entity."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEBI.getOntologyChildren",
      "api_calling": "bioservices.ChEBI.getOntologyChildren(chebiId=$)",
      "example": "bioservices.ChEBI.getOntologyChildren(chebiId=\"CHEBI:27732\")",
      "description": "Retrieves the ontology children of an entity, including relationship type.",
      "Docstring": "Retrieves the ontology children of an entity, including relationship type.\n\nParameters:\n-----------\nchebiId : str\n    A valid ChEBI identifier.\n\nReturns:\n--------\nsuds.sudsobject.OntologyDataItemList\n    suds.sudsobject.OntologyDataItemList (<class 'suds.sudsobject.OntologyDataItemList'>, treat it like a nested named tuples) representing the ontology children of the specified entity.\n\nExamples:\n--------\n>>> bioservices.ChEBI.getOntologyChildren(chebiId=\"CHEBI:27732\")"
    },
    "getOntologyParents": {
      "Parameters": [
        {
          "name": "chebiId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid ChEBI identifier, e.g., 'CHEBI:27732'."
        }
      ],
      "Returns": {
        "type": "suds.sudsobject.OntologyDataItemList",
        "description": "suds.sudsobject.OntologyDataItemList (<class 'suds.sudsobject.OntologyDataItemList'>, treat it like a list of nested named tuples) representing the parent entities in the ontology."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEBI.getOntologyParents",
      "api_calling": "bioservices.ChEBI.getOntologyParents(chebiId=$)",
      "example": "bioservices.ChEBI.getOntologyParents(chebiId=\"CHEBI:27732\")",
      "description": "Retrieves the ontology parents of an entity including the relationship type.",
      "Docstring": "Retrieves the ontology parents of an entity including the relationship type.\n\nParameters:\n-----------\nchebiId : str\n    A valid ChEBI identifier, e.g., 'CHEBI:27732'.\n\nReturns:\n--------\nsuds.sudsobject.OntologyDataItemList\n    suds.sudsobject.OntologyDataItemList (<class 'suds.sudsobject.OntologyDataItemList'>, treat it like a list of nested named tuples) representing the parent entities in the ontology.\n\nExamples:\n--------\n>>> bioservices.ChEBI.getOntologyParents(chebiId=\"CHEBI:27732\")"
    },
    "getUpdatedPolymer": {
      "Parameters": [
        {
          "name": "chebiId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid ChEBI identifier in string format."
        }
      ],
      "Returns": {
        "type": "suds.sudsobject.UpdatedPolymer",
        "description": "suds.sudsobject.UpdatedPolymer (<class 'suds.sudsobject.UpdatedPolymer'>, treat it like a nested named tuple) containing updated polymer information, including 2D MolFile structure, formula, charge on repeating units, and a primary ID."
      },
      "api_type": "method",
      "api_name": "bioservices.chebi.getUpdatedPolymer",
      "api_calling": "bioservices.chebi.getUpdatedPolymer(chebiId=$)",
      "example": "bioservices.chebi.getUpdatedPolymer(chebiId=\"CHEBI:27732\")",
      "description": "Returns the UpdatedPolymer object containing comprehensive information regarding a polymer in the ChEBI database.",
      "Docstring": "Returns the UpdatedPolymer object containing comprehensive information regarding a polymer in the ChEBI database.\n\nParameters:\n-----------\nchebiId : str\n    A valid ChEBI identifier in string format.\n\nReturns:\n--------\nsuds.sudsobject.UpdatedPolymer\n    suds.sudsobject.UpdatedPolymer (<class 'suds.sudsobject.UpdatedPolymer'>, treat it like a nested named tuple) containing updated polymer information, including 2D MolFile structure, formula, charge on repeating units, and a primary ID.\n\nExamples:\n--------\n>>> bioservices.chebi.getUpdatedPolymer(chebiId=\"CHEBI:27732\")"
    }
  },
  "chembl": {
    "compounds2accession": {
      "Parameters": [
        {
          "name": "compounds",
          "type": "list[str]",
          "default": null,
          "optional": false,
          "description": "List of ChEMBL compound IDs as strings."
        }
      ],
      "Returns": {
        "type": "defaultdict",
        "description": "Mapping of compound IDs to UniProt accession numbers."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.compounds2accession",
      "api_calling": "bioservices.ChEMBL.compounds2accession(compounds=$)",
      "example": "bioservices.ChEMBL.compounds2accession(compounds=['CHEMBL25', 'CHEMBL2'])",
      "description": "Identifies the target and corresponding UniProt accession number for a list of ChEMBL compounds.",
      "Docstring": "Identifies the target and corresponding UniProt accession number for a list of ChEMBL compounds.\n\nParameters:\n-----------\ncompounds : list[str]\n    List of ChEMBL compound IDs as strings.\n\nReturns:\n--------\ndefaultdict\n    Mapping of compound IDs to UniProt accession numbers.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.compounds2accession(compounds=['CHEMBL25', 'CHEMBL2'])"
    },
    "get_ATC": {
      "Parameters": [
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of records to retrieve. Default is 20."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The initial index from which to retrieve resources. Default is 0."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "The retrieved ATC classification entries, each represented as a dictionary."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_ATC",
      "api_calling": "bioservices.ChEMBL.get_ATC(limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_ATC(limit=5, offset=0, filters=None)",
      "description": "Retrieve the WHO ATC classification data for drugs in the ChEMBL database.",
      "Docstring": "Retrieve the WHO ATC classification data for drugs in the ChEMBL database.\n\nParameters:\n-----------\nlimit : int, optional\n    The maximum number of records to retrieve. Default is 20.\noffset : int, optional\n    The initial index from which to retrieve resources. Default is 0.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict]\n    The retrieved ATC classification entries, each represented as a dictionary.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_ATC(limit=5, offset=0, filters=None)"
    },
    "get_activity": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for activity search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of entries to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of entries to skip before retrieving."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary of activity records matching the query and filters."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_activity",
      "api_calling": "bioservices.ChEMBL.get_activity(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.c.get_activity(filters=['pchembl_value__isnull=False', 'molecule_chembl_id=CHEMBL25'])",
      "description": "Activity values recorded in an Assay.",
      "Docstring": "Activity values recorded in an Assay.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for activity search.\nlimit : int, optional\n    Number of entries to retrieve.\noffset : int, optional\n    Number of entries to skip before retrieving.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary of activity records matching the query and filters.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.c.get_activity(filters=['pchembl_value__isnull=False', 'molecule_chembl_id=CHEMBL25'])"
    },
    "get_approved_drugs": {
      "Parameters": [
        {
          "name": "max_phase",
          "type": "int",
          "default": "4",
          "optional": true,
          "description": "Filter drugs at the specified maximum approval phase stage. Default is 4 for fully approved drugs."
        },
        {
          "name": "maxdrugs",
          "type": "int",
          "default": "1000000",
          "optional": true,
          "description": "Specify the maximum number of drugs to retrieve. Default is 1000000."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of dictionaries containing information about the approved drugs."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_approved_drugs",
      "api_calling": "bioservices.ChEMBL.get_approved_drugs(max_phase=$, maxdrugs=$)",
      "example": "bioservices.ChEMBL.get_approved_drugs(max_phase=4, maxdrugs=500)",
      "description": "Retrieve information on approved drugs from the ChEMBL database at specified phases.",
      "Docstring": "Retrieve information on approved drugs from the ChEMBL database at specified phases.\n\nParameters:\n-----------\nmax_phase : int, optional\n    Filter drugs at the specified maximum approval phase stage. Default is 4 for fully approved drugs.\nmaxdrugs : int, optional\n    Specify the maximum number of drugs to retrieve. Default is 1000000.\n\nReturns:\n--------\nlist[dict]\n    A list of dictionaries containing information about the approved drugs.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_approved_drugs(max_phase=4, maxdrugs=500)"
    },
    "get_assay": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for assay search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of results to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The number of results to skip before starting to collect the result set."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing assay details matching the query parameters."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_assay",
      "api_calling": "bioservices.ChEMBL.get_assay(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_assay(query=\"CHEMBL1217643\", limit=20, offset=0, filters=None)",
      "description": "Retrieve details about assays as recorded in the ChEMBL database.",
      "Docstring": "Retrieve details about assays as recorded in the ChEMBL database.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for assay search.\nlimit : int, optional\n    The maximum number of results to retrieve.\noffset : int, optional\n    The number of results to skip before starting to collect the result set.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing assay details matching the query parameters.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_assay(query=\"CHEMBL1217643\", limit=20, offset=0, filters=None)"
    },
    "get_binding_site": {
      "Parameters": [
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Maximum number of entries to retrieve, defaults to 20."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Starting point for the results to retrieve, defaults to 0."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list where each entry contains information about a target binding site."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_binding_site",
      "api_calling": "bioservices.ChEMBL.get_binding_site(limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_binding_site(limit=10, offset=0, filters=None)",
      "description": "Retrieve data on target binding site definitions.",
      "Docstring": "Retrieve data on target binding site definitions.\n\nParameters:\n-----------\nlimit : int, optional\n    Maximum number of entries to retrieve, defaults to 20.\noffset : int, optional\n    Starting point for the results to retrieve, defaults to 0.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict]\n    A list where each entry contains information about a target binding site.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_binding_site(limit=10, offset=0, filters=None)"
    },
    "get_biotherapeutic": {
      "Parameters": [
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of records to retrieve, not exceeding a predefined maximum."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of records to skip from the start."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of dictionaries containing biotherapeutic molecules along with their data."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_biotherapeutic",
      "api_calling": "bioservices.ChEMBL.get_biotherapeutic(limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_biotherapeutic(limit=10, offset=0, filters=None)",
      "description": "Retrieve information about biotherapeutic molecules, including HELM notation and related data.",
      "Docstring": "Retrieve information about biotherapeutic molecules, including HELM notation and related data.\n\nParameters:\n-----------\nlimit : int, optional\n    Number of records to retrieve, not exceeding a predefined maximum.\noffset : int, optional\n    Number of records to skip from the start.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict]\n    A list of dictionaries containing biotherapeutic molecules along with their data.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_biotherapeutic(limit=10, offset=0, filters=None)"
    },
    "get_cell_line": {
      "Parameters": [
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of entries to retrieve. Maximum limit is 1000."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The number of entries to skip before starting retrieval."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "List of cell line information records matching query parameters."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_cell_line",
      "api_calling": "bioservices.ChEMBL.get_cell_line(limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_cell_line(limit=20, offset=0, filters=None)",
      "description": "Retrieve cell line information from the ChEMBL database.",
      "Docstring": "Retrieve cell line information from the ChEMBL database.\n\nParameters:\n-----------\nlimit : int, optional\n    Number of entries to retrieve. Maximum limit is 1000.\noffset : int, optional\n    The number of entries to skip before starting retrieval.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict]\n    List of cell line information records matching query parameters.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_cell_line(limit=20, offset=0, filters=None)"
    },
    "get_chembl_id_lookup": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for ChEMBL ID lookup."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Maximum number of entities to retrieve in a single request."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of entities to skip from the start."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing the information of ChEMBL ID entities."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_chembl_id_lookup",
      "api_calling": "bioservices.ChEMBL.get_chembl_id_lookup(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_chembl_id_lookup(query=\"CHEMBL123\", limit=20, offset=0, filters=None)",
      "description": "Retrieve information about ChEMBL IDs.",
      "Docstring": "Retrieve information about ChEMBL IDs.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for ChEMBL ID lookup.\nlimit : int, optional\n    Maximum number of entities to retrieve in a single request.\noffset : int, optional\n    Number of entities to skip from the start.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing the information of ChEMBL ID entities.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_chembl_id_lookup(query=\"CHEMBL123\", limit=20, offset=0, filters=None)"
    },
    "get_compound_record": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for compound record search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of records to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Offset for the starting record."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing the compound record details."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_compound_record",
      "api_calling": "bioservices.ChEMBL.get_compound_record(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_compound_record(query=\"1874935\", limit=20, offset=0, filters=None)",
      "description": "Retrieve occurrence of a specified compound in a particular document.",
      "Docstring": "Retrieve occurrence of a specified compound in a particular document.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for compound record search.\nlimit : int, optional\n    Number of records to retrieve.\noffset : int, optional\n    Offset for the starting record.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing the compound record details.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_compound_record(query=\"1874935\", limit=20, offset=0, filters=None)"
    },
    "get_compound_structural_alert": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for compound structural alert search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Defines the maximum number of records to retrieve at once."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Specifies the number of records to skip before beginning to fetch data."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of structural alert dictionaries or single dictionary related to compounds that meet the query and filter criteria."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_compound_structural_alert",
      "api_calling": "bioservices.ChEMBL.get_compound_structural_alert(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_compound_structural_alert(query='CHEMBL123', limit=20, offset=0, filters=None)",
      "description": "Returns structural alerts in compounds based on the provided criteria.",
      "Docstring": "Returns structural alerts in compounds based on the provided criteria.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for compound structural alert search.\nlimit : int, optional\n    Defines the maximum number of records to retrieve at once.\noffset : int, optional\n    Specifies the number of records to skip before beginning to fetch data.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of structural alert dictionaries or single dictionary related to compounds that meet the query and filter criteria.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_compound_structural_alert(query='CHEMBL123', limit=20, offset=0, filters=None)"
    },
    "get_document": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for document search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Limit the number of returned records (default is 20)."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The starting point for records to fetch (default is 0)."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing metadata and documents extracted from the ChEMBL dataset."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_document",
      "api_calling": "bioservices.ChEMBL.get_document(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_document_term(query=\"CHEMBL1123498\", limit=20, offset=0, filters=None)",
      "description": "Retrieve details of documents/datasets from which assays have been extracted.",
      "Docstring": "Retrieve details of documents/datasets from which assays have been extracted.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for document search.\nlimit : int, optional\n    Limit the number of returned records (default is 20).\noffset : int, optional\n    The starting point for records to fetch (default is 0).\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing metadata and documents extracted from the ChEMBL dataset.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_document_term(query=\"CHEMBL1123498\", limit=20, offset=0, filters=None)"
    },
    "get_document_similarity": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for document similarity search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of similar documents to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of documents to skip before starting to retrieve."
        },
        {
          "name": "filters",
          "type": "list",
          "default": "None",
          "optional": true,
          "description": "List of conditions to apply to the search."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing similar documents and associated metadata."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_document_similarity",
      "api_calling": "bioservices.ChEMBL.get_document_similarity(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_document_similarity(limit=20, offset=0, filters=None)",
      "description": "Provides documents similar to a specified one.",
      "Docstring": "Provides documents similar to a specified one.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for document similarity search.\nlimit : int, optional\n    Number of similar documents to retrieve.\noffset : int, optional\n    Number of documents to skip before starting to retrieve.\nfilters : list, optional\n    List of conditions to apply to the search.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing similar documents and associated metadata.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_document_similarity(limit=20, offset=0, filters=None)"
    },
    "get_drug": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for drug search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Maximum number of results to be retrieved."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of results to skip from the start."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing drug-related information."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_drug",
      "api_calling": "bioservices.ChEMBL.get_drug(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_drug(query=\"CHEMBL25\", limit=10)",
      "description": "Retrieve information about approved drugs including applicants, patents, and research codes.",
      "Docstring": "Retrieve information about approved drugs including applicants, patents, and research codes.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for drug search.\nlimit : int, optional\n    Maximum number of results to be retrieved.\noffset : int, optional\n    Number of results to skip from the start.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing drug-related information.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_drug(query=\"CHEMBL25\", limit=10)"
    },
    "get_drug_indication": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for drug indication search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of entries to retrieve for the query."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The number of entries to skip before starting to collect the result set."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing joined drug indication data."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_drug_indication",
      "api_calling": "bioservices.ChEMBL.get_drug_indication(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_drug_indication(limit=50, offset=100)",
      "description": "Retrieves drug indication information by combining data for drugs and diseases.",
      "Docstring": "Retrieves drug indication information by combining data for drugs and diseases.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for drug indication search.\nlimit : int, optional\n    The maximum number of entries to retrieve for the query.\noffset : int, optional\n    The number of entries to skip before starting to collect the result set.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing joined drug indication data.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_drug_indication(limit=50, offset=100)"
    },
    "get_go_slim": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for GO slim search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of records to return in one request."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The number of records to skip before starting to return records."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing the requested GO slim resources."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_go_slim",
      "api_calling": "bioservices.ChEMBL.get_go_slim(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_go_slim(limit=10, offset=0, filters=None)",
      "description": "Retrieve GO slim ontology data from the ChEMBL database.",
      "Docstring": "Retrieve GO slim ontology data from the ChEMBL database.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for GO slim search.\nlimit : int, optional\n    The maximum number of records to return in one request.\noffset : int, optional\n    The number of records to skip before starting to return records.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing the requested GO slim resources.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_go_slim(limit=10, offset=0, filters=None)"
    },
    "get_mechanism": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for mechanism search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Maximum number of results to return; use -1 for all available records."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of records to skip before starting to fetch results."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "List or dictionary of mechanism of action information records for FDA-approved drugs."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_mechanism",
      "api_calling": "bioservices.ChEMBL.get_mechanism(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_mechanism(limit=20, offset=0, filters=None)",
      "description": "Fetches mechanism of action information for FDA-approved drugs.",
      "Docstring": "Fetches mechanism of action information for FDA-approved drugs.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for mechanism search.\nlimit : int, optional\n    Maximum number of results to return; use -1 for all available records.\noffset : int, optional\n    Number of records to skip before starting to fetch results.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    List or dictionary of mechanism of action information records for FDA-approved drugs.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_mechanism(limit=20, offset=0, filters=None)"
    },
    "get_metabolism": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for metabolism search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of entries to retrieve, with a default value of 20."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Offset for the entries retrieval, with a default value of 0."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing details about metabolic pathways, with references."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_metabolism",
      "api_calling": "bioservices.ChEMBL.get_metabolism(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_metabolism(query=None, limit=50, offset=10, filters=None)",
      "description": "Provides information about metabolic pathways with references.",
      "Docstring": "Provides information about metabolic pathways with references.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for metabolism search.\nlimit : int, optional\n    Number of entries to retrieve, with a default value of 20.\noffset : int, optional\n    Offset for the entries retrieval, with a default value of 0.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing details about metabolic pathways, with references.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_metabolism(query=None, limit=50, offset=10, filters=None)"
    },
    "get_molecule": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for molecule search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of molecules to retrieve. Maximum is 1000."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of molecules to skip before retrieving results."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary with keys including 'page_meta' and 'molecules'."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_molecule",
      "api_calling": "bioservices.ChEMBL.get_molecule(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_molecule(query='CHEMBL25', limit=10, offset=0, filters=None)",
      "description": "Fetches molecular data from the ChEMBL database.",
      "Docstring": "Fetches molecular data from the ChEMBL database.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for molecule search.\nlimit : int, optional\n    Number of molecules to retrieve. Maximum is 1000.\noffset : int, optional\n    Number of molecules to skip before retrieving results.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary with keys including 'page_meta' and 'molecules'.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_molecule(query='CHEMBL25', limit=10, offset=0, filters=None)"
    },
    "get_molecule_form": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for molecule form search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Maximum number of entries to return."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of entries to skip before retrieving results."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing the relationships between molecule parents and salts."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_molecule_form",
      "api_calling": "bioservices.ChEMBL.get_molecule_form(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_molecule_form(query=\"CHEMBL2\", limit=20, offset=0, filters=None)",
      "description": "Relationships between molecule parents and salts.",
      "Docstring": "Relationships between molecule parents and salts.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for molecule form search.\nlimit : int, optional\n    Maximum number of entries to return.\noffset : int, optional\n    Number of entries to skip before retrieving results.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing the relationships between molecule parents and salts.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_molecule_form(query=\"CHEMBL2\", limit=20, offset=0, filters=None)"
    },
    "get_organism": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for organism search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The number of records to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The starting point for the retrieval."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing organism-related data retrieved from ChEMBL."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_organism",
      "api_calling": "bioservices.ChEMBL.get_organism(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_organism(limit=10, offset=0, filters=None)",
      "description": "Retrieve data about an organism from the ChEMBL database.",
      "Docstring": "Retrieve data about an organism from the ChEMBL database.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for organism search.\nlimit : int, optional\n    The number of records to retrieve.\noffset : int, optional\n    The starting point for the retrieval.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing organism-related data retrieved from ChEMBL.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_organism(limit=10, offset=0, filters=None)"
    },
    "get_similarity": {
      "Parameters": [
        {
          "name": "structure",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Provide a valid existing substructure in SMILES format to look for in all molecules."
        },
        {
          "name": "similarity",
          "type": "int",
          "default": "80",
          "optional": true,
          "description": "Must be an integer greater than 70 and less than 100."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Maximum number of molecules to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of molecules to skip before retrieval."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of molecules matching the similarity search criteria."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_similarity",
      "api_calling": "bioservices.ChEMBL.get_similarity(structure=$, similarity=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_similarity(structure=\"CC(=O)Oc1ccccc1C(=O)O\", similarity=85, limit=10, offset=0, filters=None)",
      "description": "Conduct a similarity search for molecules in the ChEMBL database.",
      "Docstring": "Conduct a similarity search for molecules in the ChEMBL database.\n\nParameters:\n-----------\nstructure : str\n    Provide a valid existing substructure in SMILES format to look for in all molecules.\nsimilarity : int, optional\n    Must be an integer greater than 70 and less than 100.\nlimit : int, optional\n    Maximum number of molecules to retrieve.\noffset : int, optional\n    Number of molecules to skip before retrieval.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict]\n    A list of molecules matching the similarity search criteria.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_similarity(structure=\"CC(=O)Oc1ccccc1C(=O)O\", similarity=85, limit=10, offset=0, filters=None)"
    },
    "get_source": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for source search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of records to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The number of records to skip in the retrieval process."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing the documents or dataset source information."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_source",
      "api_calling": "bioservices.ChEMBL.get_source(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_source(limit=10, offset=0, filters=None)",
      "description": "Retrieve information about document or dataset sources.",
      "Docstring": "Retrieve information about document or dataset sources.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for source search.\nlimit : int, optional\n    The maximum number of records to retrieve.\noffset : int, optional\n    The number of records to skip in the retrieval process.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing the documents or dataset source information.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_source(limit=10, offset=0, filters=None)"
    },
    "get_status": {
      "Parameters": [],
      "Returns": {
        "type": "dict",
        "description": "A dictionary with information about database version and entry counts."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_status",
      "api_calling": "bioservices.ChEMBL.get_status()",
      "example": "bioservices.ChEMBL.get_status()",
      "description": "This method provides a version overview and entry counts of the database, including activities, compound records, distinct compounds, publications, targets, etc.",
      "Docstring": "This method provides a version overview and entry counts of the database, including activities, compound records, distinct compounds, publications, targets, etc.\n\n\nReturns:\n--------\ndict\n    A dictionary with information about database version and entry counts.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_status()"
    },
    "get_status_resources": {
      "Parameters": [],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the total counts of entries for each data resource in the ChEMBL database."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_status_resources",
      "api_calling": "bioservices.ChEMBL.get_status_resources()",
      "example": "bioservices.ChEMBL.get_status_resources()",
      "description": "Retrieves the number of entries for all available resources in the ChEMBL database.",
      "Docstring": "Retrieves the number of entries for all available resources in the ChEMBL database.\n\n\nReturns:\n--------\ndict\n    A dictionary containing the total counts of entries for each data resource in the ChEMBL database.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_status_resources()"
    },
    "get_substructure": {
      "Parameters": [
        {
          "name": "structure",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid substructure in SMILE format or ChEMBL ID."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Maximum number of results to return."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of initial results to skip."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of molecules corresponding to the substructure search."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_substructure",
      "api_calling": "bioservices.ChEMBL.get_substructure(structure=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_substructure(structure=\"CHEMBL25\", limit=20, offset=0, filters=None)",
      "description": "Perform a substructure search based on the provided chemical structure.",
      "Docstring": "Perform a substructure search based on the provided chemical structure.\n\nParameters:\n-----------\nstructure : str\n    A valid substructure in SMILE format or ChEMBL ID.\nlimit : int, optional\n    Maximum number of results to return.\noffset : int, optional\n    Number of initial results to skip.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict]\n    A list of molecules corresponding to the substructure search.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_substructure(structure=\"CHEMBL25\", limit=20, offset=0, filters=None)"
    },
    "get_target": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for target search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of results to retrieve. Use -1 to retrieve all."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The offset of the first result to retrieve for pagination."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary representing targets."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_target",
      "api_calling": "bioservices.ChEMBL.get_target(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_target(query='CHEMBL240', limit=20, offset=0, filters=None)",
      "description": "Retrieve targets, including proteins and non-proteins, as defined in assay definitions.",
      "Docstring": "Retrieve targets, including proteins and non-proteins, as defined in assay definitions.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for target search.\nlimit : int, optional\n    The maximum number of results to retrieve. Use -1 to retrieve all.\noffset : int, optional\n    The offset of the first result to retrieve for pagination.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary representing targets.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_target(query='CHEMBL240', limit=20, offset=0, filters=None)"
    },
    "get_target_component": {
      "Parameters": [
        {
          "name": "query",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for target compound search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of entries to retrieve per request."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Starting offset for entry retrieval."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "List of dictionaries or dictionary containing detailed target component information."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_target_component",
      "api_calling": "bioservices.ChEMBL.get_target_component(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_target_component(query=1, limit=10, offset=0, filters=None)",
      "description": "Retrieve comprehensive information about specific target components, including their sequence details.",
      "Docstring": "Retrieve comprehensive information about specific target components, including their sequence details.\n\nParameters:\n-----------\nquery : int, optional\n    Query string or entity identifier for target compound search.\nlimit : int, optional\n    Number of entries to retrieve per request.\noffset : int, optional\n    Starting offset for entry retrieval.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    List of dictionaries or dictionary containing detailed target component information.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_target_component(query=1, limit=10, offset=0, filters=None)"
    },
    "get_target_relation": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Query string or entity identifier for target relation search."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of items to retrieve in one call."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of items to skip before starting retrieval."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing details about target relations."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_target_relation",
      "api_calling": "bioservices.ChEMBL.get_target_relation(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_target_relation(query='CHEMBL261', limit=20, offset=0, filters=None)",
      "description": "Describes relations between targets.",
      "Docstring": "Describes relations between targets.\n\nParameters:\n-----------\nquery : str, optional\n    Query string or entity identifier for target relation search.\nlimit : int, optional\n    Number of items to retrieve in one call.\noffset : int, optional\n    Number of items to skip before starting retrieval.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing details about target relations.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_target_relation(query='CHEMBL261', limit=20, offset=0, filters=None)"
    },
    "get_tissue": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "The identifier or query term associated with the tissue resource."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of results to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The starting index of the results to return."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "A list of dictionaries or dictionary containing the tissue classification entries."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_tissue",
      "api_calling": "bioservices.ChEMBL.get_tissue(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_tissue(limit=20, offset=0, filters=['pref_name__contains=cervix'])",
      "description": "Retrieves tissue classification information from the ChEMBL database.",
      "Docstring": "Retrieves tissue classification information from the ChEMBL database.\n\nParameters:\n-----------\nquery : str, optional\n    The identifier or query term associated with the tissue resource.\nlimit : int, optional\n    The maximum number of results to retrieve.\noffset : int, optional\n    The starting index of the results to return.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    A list of dictionaries or dictionary containing the tissue classification entries.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_tissue(limit=20, offset=0, filters=['pref_name__contains=cervix'])"
    },
    "get_xref_source": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "The query to search cross-references"
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of records to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The number of records to skip before starting to collect the result set."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict] (query=None) or dict (query=\"...\")",
        "description": "The search result matching the query parameters."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.get_xref_source",
      "api_calling": "bioservices.ChEMBL.get_xref_source(query=$, limit=$, offset=$, filters=$)",
      "example": "bioservices.ChEMBL.get_xref_source(limit=5, offset=0)",
      "description": "Retrieves cross-reference information from ChEMBL's database using specified query parameters.",
      "Docstring": "Retrieves cross-reference information from ChEMBL's database using specified query parameters.\n\nParameters:\n-----------\nquery : str, optional\n    The query to search cross-references\nlimit : int, optional\n    The maximum number of records to retrieve.\noffset : int, optional\n    The number of records to skip before starting to collect the result set.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict] (query=None) or dict (query=\"...\")\n    The search result matching the query parameters.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.get_xref_source(limit=5, offset=0)"
    },
    "order_by": {
      "Parameters": [
        {
          "name": "data",
          "type": "list[dict]",
          "default": null,
          "optional": false,
          "description": "A list of dictionaries representing data records to be sorted."
        },
        {
          "name": "name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The field name by which the data should be ordered. Includes nested field access using '__'."
        },
        {
          "name": "filters",
          "type": "list[str]",
          "default": "None",
          "optional": true,
          "description": "List of filter criteria for narrowing the search results."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "The ordered list of data based on the provided field."
      },
      "api_type": "method",
      "api_name": "bioservices.chembl.order_by",
      "api_calling": "bioservices.chembl.order_by(data=$, name=$, ascending=$)",
      "example": "bioservices.chembl.order_by(data=data, name='molecule_chembl_id')",
      "description": "Sorts a given list of data dictionaries based on a specified field.",
      "Docstring": "Sorts a given list of data dictionaries based on a specified field.\n\nParameters:\n-----------\ndata : list[dict]\n    A list of dictionaries representing data records to be sorted.\nname : str\n    The field name by which the data should be ordered. Includes nested field access using '__'.\nfilters : list[str], optional\n    List of filter criteria for narrowing the search results.\n\nReturns:\n--------\nlist[dict]\n    The ordered list of data based on the provided field.\n\nExamples:\n--------\n>>> bioservices.chembl.order_by(data=data, name='molecule_chembl_id')"
    },
    "search_activity": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Search query to filter the activities."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of records to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of records to skip."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing activity values recorded in assays, up to the limit and offset specified."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.search_activity",
      "api_calling": "bioservices.ChEMBL.search_activity(query=$, limit=$, offset=$)",
      "example": "bioservices.ChEMBL.search_activity(query=\"CHEMBL123\", limit=10, offset=5)",
      "description": "Retrieve activity values recorded in an assay.",
      "Docstring": "Retrieve activity values recorded in an assay.\n\nParameters:\n-----------\nquery : str\n    Search query to filter the activities.\nlimit : int, optional\n    Number of records to retrieve.\noffset : int, optional\n    Number of records to skip.\n\nReturns:\n--------\ndict\n    A dictionary containing activity values recorded in assays, up to the limit and offset specified.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.search_activity(query=\"CHEMBL123\", limit=10, offset=5)"
    },
    "search_assay": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The string query to search for assays in the ChEMBL database."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of records to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The index of the first record to retrieve."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing assay details matching the search query."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.search_assay",
      "api_calling": "bioservices.ChEMBL.search_assay(query=$, limit=$, offset=$)",
      "example": "bioservices.ChEMBL.search_assay(query='CHEMBL1217643', limit=20, offset=0)",
      "description": "Search and retrieve assay details from the ChEMBL database.",
      "Docstring": "Search and retrieve assay details from the ChEMBL database.\n\nParameters:\n-----------\nquery : str\n    The string query to search for assays in the ChEMBL database.\nlimit : int, optional\n    The maximum number of records to retrieve.\noffset : int, optional\n    The index of the first record to retrieve.\n\nReturns:\n--------\ndict\n    A dictionary containing assay details matching the search query.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.search_assay(query='CHEMBL1217643', limit=20, offset=0)"
    },
    "search_chembl_id_lookup": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search query to look up ChEMBL IDs."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of results to return."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The starting point for the query results."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the lookup results for the provided query."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.search_chembl_id_lookup",
      "api_calling": "bioservices.ChEMBL.search_chembl_id_lookup(query=$, limit=$, offset=$)",
      "example": "bioservices.ChEMBL.search_chembl_id_lookup(query=\"CHEMBL25\", limit=10, offset=0)",
      "description": "Look up ChEMBL ID entity type.",
      "Docstring": "Look up ChEMBL ID entity type.\n\nParameters:\n-----------\nquery : str\n    The search query to look up ChEMBL IDs.\nlimit : int, optional\n    The maximum number of results to return.\noffset : int, optional\n    The starting point for the query results.\n\nReturns:\n--------\ndict\n    A dictionary containing the lookup results for the provided query.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.search_chembl_id_lookup(query=\"CHEMBL25\", limit=10, offset=0)"
    },
    "search_document": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Query string to search for in documents."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of results to retrieve."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Start position of results to retrieve."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the search results."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.search_document",
      "api_calling": "bioservices.ChEMBL.search_document(query=$, limit=$, offset=$)",
      "example": "bioservices.ChEMBL.search_document(query='cancer', limit=10, offset=0)",
      "description": "Perform a search for documents within the ChEMBL database.",
      "Docstring": "Perform a search for documents within the ChEMBL database.\n\nParameters:\n-----------\nquery : str\n    Query string to search for in documents.\nlimit : int, optional\n    Number of results to retrieve.\noffset : int, optional\n    Start position of results to retrieve.\n\nReturns:\n--------\ndict\n    A dictionary containing the search results.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.search_document(query='cancer', limit=10, offset=0)"
    },
    "search_molecule": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The molecule identifier or criterion for searching, such as synonyms, SMILE strings, or InChI Key."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "The maximum number of results to return. Default is 20."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "The initial index from which search results are returned. Default is 0."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing search results and associated data or notes."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.search_molecule",
      "api_calling": "bioservices.ChEMBL.search_molecule(query=$, limit=$, offset=$)",
      "example": "bioservices.ChEMBL.search_molecule(query='aspirin', limit=20, offset=0)",
      "description": "Search for molecule data in the ChEMBL database using specific queries.",
      "Docstring": "Search for molecule data in the ChEMBL database using specific queries.\n\nParameters:\n-----------\nquery : str\n    The molecule identifier or criterion for searching, such as synonyms, SMILE strings, or InChI Key.\nlimit : int, optional\n    The maximum number of results to return. Default is 20.\noffset : int, optional\n    The initial index from which search results are returned. Default is 0.\n\nReturns:\n--------\ndict\n    A dictionary containing search results and associated data or notes.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.search_molecule(query='aspirin', limit=20, offset=0)"
    },
    "search_target": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Query string to search for a target. Example: gene name or synonyms."
        },
        {
          "name": "limit",
          "type": "int",
          "default": "20",
          "optional": true,
          "description": "Number of results to retrieve. Must be greater than zero and less than or equal to 1000."
        },
        {
          "name": "offset",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Number of results to skip before returning data."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the search results with detailed target data."
      },
      "api_type": "method",
      "api_name": "bioservices.ChEMBL.search_target",
      "api_calling": "bioservices.ChEMBL.search_target(query=$, limit=$, offset=$)",
      "example": "bioservices.ChEMBL.search_target(query=\"GABRB2\", limit=20, offset=0)",
      "description": "Search for targets (protein and non-protein) based on provided query.",
      "Docstring": "Search for targets (protein and non-protein) based on provided query.\n\nParameters:\n-----------\nquery : str\n    Query string to search for a target. Example: gene name or synonyms.\nlimit : int, optional\n    Number of results to retrieve. Must be greater than zero and less than or equal to 1000.\noffset : int, optional\n    Number of results to skip before returning data.\n\nReturns:\n--------\ndict\n    A dictionary containing the search results with detailed target data.\n\nExamples:\n--------\n>>> bioservices.ChEMBL.search_target(query=\"GABRB2\", limit=20, offset=0)"
    }
  },
  "cog": {
    "get_all_cogs_definition": {
      "Parameters": [
        {
          "name": "page",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "Determines the page of the results to retrieve; if omitted, fetches all."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing all COG definitions or results from the specified page."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_all_cogs_definition",
      "api_calling": "bioservices.COG.get_all_cogs_definition(page=$)",
      "example": "bioservices.COG.get_all_cogs_definition(page=1)",
      "description": "Fetch all COG Definitions or definitions for a specified page.",
      "Docstring": "Fetch all COG Definitions or definitions for a specified page.\n\nParameters:\n-----------\npage : int, optional\n    Determines the page of the results to retrieve; if omitted, fetches all.\n\nReturns:\n--------\ndict\n    A dictionary containing all COG definitions or results from the specified page.\n\nExamples:\n--------\n>>> bioservices.COG.get_all_cogs_definition(page=1)"
    },
    "get_cog_definition_by_cog_id": {
      "Parameters": [
        {
          "name": "cog_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the desired COG."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the definition details of the specified COG."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_cog_definition_by_cog_id",
      "api_calling": "bioservices.COG.get_cog_definition_by_cog_id(cog_id=$)",
      "example": "bioservices.COG.get_cog_definition_by_cog_id(cog_id=\"COG0003\")",
      "description": "Retrieve the definition of a specific COG by its identifier.",
      "Docstring": "Retrieve the definition of a specific COG by its identifier.\n\nParameters:\n-----------\ncog_id : str\n    The identifier of the desired COG.\n\nReturns:\n--------\ndict\n    A dictionary containing the definition details of the specified COG.\n\nExamples:\n--------\n>>> bioservices.COG.get_cog_definition_by_cog_id(cog_id=\"COG0003\")"
    },
    "get_cogs": {
      "Parameters": [
        {
          "name": "kwargs",
          "type": "dict",
          "default": null,
          "optional": true,
          "description": "Additional parameters to refine the query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing results, count, previous, and next page data from the COG API."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_cogs",
      "api_calling": "bioservices.COG.get_cogs(kwargs=$)",
      "example": "bioservices.COG.get_cogs(page=1)",
      "description": "Retrieve information about Clusters of Orthologous Groups (COGs).",
      "Docstring": "Retrieve information about Clusters of Orthologous Groups (COGs).\n\nParameters:\n-----------\nkwargs : dict, optional\n    Additional parameters to refine the query.\n\nReturns:\n--------\ndict\n    A dictionary containing results, count, previous, and next page data from the COG API.\n\nExamples:\n--------\n>>> bioservices.COG.get_cogs(page=1)"
    },
    "get_cogs_by_category_id": {
      "Parameters": [
        {
          "name": "category",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Taxonomic Category ID for filtering results."
        },
        {
          "name": "page",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "Page number for paginated results; if None, retrieves all pages."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing filtered COG information based on the specified category ID."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_cogs_by_category_id",
      "api_calling": "bioservices.COG.get_cogs_by_category_id(category=$, page=$)",
      "example": "bioservices.COG.get_cogs_by_category_id(category='651137', page=1)",
      "description": "Filter COGs by taxonomic category ID.",
      "Docstring": "Filter COGs by taxonomic category ID.\n\nParameters:\n-----------\ncategory : str\n    Taxonomic Category ID for filtering results.\npage : int, optional\n    Page number for paginated results; if None, retrieves all pages.\n\nReturns:\n--------\ndict\n    A dictionary containing filtered COG information based on the specified category ID.\n\nExamples:\n--------\n>>> bioservices.COG.get_cogs_by_category_id(category='651137', page=1)"
    },
    "get_cogs_by_id": {
      "Parameters": [
        {
          "name": "cog_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Specific COG ID tag to filter results, e.g., COG0003."
        },
        {
          "name": "page",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "Number of the requested page for results, defaults to retrieving all pages."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing filtered COG entries based on provided COG ID and page."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_cogs_by_id",
      "api_calling": "bioservices.COG.get_cogs_by_id(cog_id=$, page=$)",
      "example": "bioservices.COG.get_cogs_by_id(cog_id=\"COG0003\", page=1)",
      "description": "Filter COGs by specific COG ID tag.",
      "Docstring": "Filter COGs by specific COG ID tag.\n\nParameters:\n-----------\ncog_id : str\n    Specific COG ID tag to filter results, e.g., COG0003.\npage : int, optional\n    Number of the requested page for results, defaults to retrieving all pages.\n\nReturns:\n--------\ndict\n    A dictionary containing filtered COG entries based on provided COG ID and page.\n\nExamples:\n--------\n>>> bioservices.COG.get_cogs_by_id(cog_id=\"COG0003\", page=1)"
    },
    "get_cogs_by_id_and_organism": {
      "Parameters": [
        {
          "name": "cog_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The COG ID to be queried. Example value: COG0004."
        },
        {
          "name": "organism",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The organism's identifier (e.g., Escherichia_coli_K-12_sub_MG1655)."
        },
        {
          "name": "page",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "The page number for paginated results. Default is None for querying all pages."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing filtered COGs corresponding to the input parameters."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_cogs_by_id_and_organism",
      "api_calling": "bioservices.COG.get_cogs_by_id_and_organism(cog_id=$, organism=$, page=$)",
      "example": "bioservices.COG.get_cogs_by_id_and_organism(cog_id='COG0004', organism='Escherichia_coli_K-12_sub_MG1655', page=1)",
      "description": "Filter COGs by their ID and associated organism.",
      "Docstring": "Filter COGs by their ID and associated organism.\n\nParameters:\n-----------\ncog_id : str\n    The COG ID to be queried. Example value: COG0004.\norganism : str\n    The organism's identifier (e.g., Escherichia_coli_K-12_sub_MG1655).\npage : int, optional\n    The page number for paginated results. Default is None for querying all pages.\n\nReturns:\n--------\ndict\n    A dictionary containing filtered COGs corresponding to the input parameters.\n\nExamples:\n--------\n>>> bioservices.COG.get_cogs_by_id_and_organism(cog_id='COG0004', organism='Escherichia_coli_K-12_sub_MG1655', page=1)"
    },
    "get_cogs_by_organism": {
      "Parameters": [
        {
          "name": "name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The exact organism name to filter the Clusters of Orthologous Groups."
        },
        {
          "name": "page",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "The specific page of results to return, where each page contains 10 entries."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the filtered groups of orthologous genes for the specified organism."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_cogs_by_organism",
      "api_calling": "bioservices.COG.get_cogs_by_organism(name=$, page=$)",
      "example": "bioservices.COG.get_cogs_by_organism(name='Nitrosopumilus_maritimus_SCM1', page=1)",
      "description": "Fetches Clusters of Orthologous Groups (COGs) associated with a given organism name from the COG database.",
      "Docstring": "Fetches Clusters of Orthologous Groups (COGs) associated with a given organism name from the COG database.\n\nParameters:\n-----------\nname : str\n    The exact organism name to filter the Clusters of Orthologous Groups.\npage : int, optional\n    The specific page of results to return, where each page contains 10 entries.\n\nReturns:\n--------\ndict\n    A dictionary containing the filtered groups of orthologous genes for the specified organism.\n\nExamples:\n--------\n>>> bioservices.COG.get_cogs_by_organism(name='Nitrosopumilus_maritimus_SCM1', page=1)"
    },
    "get_cogs_by_taxon_id": {
      "Parameters": [
        {
          "name": "taxon_id",
          "type": "int",
          "default": null,
          "optional": false,
          "description": "The identifier of the taxonomy to filter by."
        },
        {
          "name": "page",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "The page number of the results to retrieve, if applicable."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing filtered COG information based on the taxonomic ID."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_cogs_by_taxon_id",
      "api_calling": "bioservices.COG.get_cogs_by_taxon_id(taxon_id=$, page=$)",
      "example": "bioservices.COG.get_cogs_by_taxon_id(taxon_id=1229908, page=1)",
      "description": "Filter COGs by taxonomy ID, retrieving the relevant data.",
      "Docstring": "Filter COGs by taxonomy ID, retrieving the relevant data.\n\nParameters:\n-----------\ntaxon_id : int\n    The identifier of the taxonomy to filter by.\npage : int, optional\n    The page number of the results to retrieve, if applicable.\n\nReturns:\n--------\ndict\n    A dictionary containing filtered COG information based on the taxonomic ID.\n\nExamples:\n--------\n>>> bioservices.COG.get_cogs_by_taxon_id(taxon_id=1229908, page=1)"
    },
    "get_taxonomic_categories": {
      "Parameters": [
        {
          "name": "page",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "The page number to return; if None, all pages are retrieved."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Dictionary with all retrieved taxonomic categories."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_taxonomic_categories",
      "api_calling": "bioservices.COG.get_taxonomic_categories(page=$)",
      "example": "bioservices.COG.get_taxonomic_categories(page=None)",
      "description": "Retrieve all taxonomic categories, optionally limited to a specific page.",
      "Docstring": "Retrieve all taxonomic categories, optionally limited to a specific page.\n\nParameters:\n-----------\npage : int, optional\n    The page number to return; if None, all pages are retrieved.\n\nReturns:\n--------\ndict\n    Dictionary with all retrieved taxonomic categories.\n\nExamples:\n--------\n>>> bioservices.COG.get_taxonomic_categories(page=None)"
    },
    "get_taxonomic_category_by_name": {
      "Parameters": [
        {
          "name": "name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The name of the desired taxonomic category."
        },
        {
          "name": "page",
          "type": "int",
          "default": "None",
          "optional": true,
          "description": "The specific page of the results to fetch; defaults to all pages."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the information about the specified taxonomic category."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.get_taxonomic_category_by_name",
      "api_calling": "bioservices.COG.get_taxonomic_category_by_name(name=$, page=$)",
      "example": "bioservices.COG.get_taxonomic_category_by_name(name=\"ALPHAPROTEOBACTERIA\", page=1)",
      "description": "Retrieves a specific taxonomic category by its name.",
      "Docstring": "Retrieves a specific taxonomic category by its name.\n\nParameters:\n-----------\nname : str\n    The name of the desired taxonomic category.\npage : int, optional\n    The specific page of the results to fetch; defaults to all pages.\n\nReturns:\n--------\ndict\n    A dictionary containing the information about the specified taxonomic category.\n\nExamples:\n--------\n>>> bioservices.COG.get_taxonomic_category_by_name(name=\"ALPHAPROTEOBACTERIA\", page=1)"
    },
    "search_organism": {
      "Parameters": [
        {
          "name": "name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The organism name to search for possible matches."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list where each item is a dictionary containing genome name, assembly identifier, and taxon identifier."
      },
      "api_type": "method",
      "api_name": "bioservices.COG.search_organism",
      "api_calling": "bioservices.COG.search_organism(name=$)",
      "example": "bioservices.COG.search_organism(name='coli')",
      "description": "Search for candidates matching the provided organism name.",
      "Docstring": "Search for candidates matching the provided organism name.\n\nParameters:\n-----------\nname : str\n    The organism name to search for possible matches.\n\nReturns:\n--------\nlist[dict]\n    A list where each item is a dictionary containing genome name, assembly identifier, and taxon identifier.\n\nExamples:\n--------\n>>> bioservices.COG.search_organism(name='coli')"
    }
  },
  "dbfetch": {
    "fetch": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The entry identifier in db:id format (e.g. 'UniProtKB:WAP_RAT')."
        },
        {
          "name": "db",
          "type": "str",
          "default": "ena_sequence",
          "optional": true,
          "description": "Database name to search in; defaults to 'ena_sequence'."
        },
        {
          "name": "format",
          "type": "str",
          "default": "default",
          "optional": true,
          "description": "The name of the format required; defaults to 'default' (FASTA)."
        },
        {
          "name": "style",
          "type": "str",
          "default": "raw",
          "optional": true,
          "description": "The name of the style required ('raw', 'default', 'html'); defaults to 'raw'."
        },
        {
          "name": "pageHtml",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "If True, return the content as an HTML page."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "The response content in the requested format and style."
      },
      "api_type": "method",
      "api_name": "bioservices.DBFetch.fetch",
      "api_calling": "bioservices.DBFetch.fetch(query=$, db=$, format=$, style=$, pageHtml=$)",
      "example": "bioservices.DBFetch.fetch(query=\"P53503\", db=\"uniprot\", format=\"fasta\")",
      "description": "Fetch an entry in a defined format and style.",
      "Docstring": "Fetch an entry in a defined format and style.\n\nParameters:\n-----------\nquery : str\n    The entry identifier in db:id format (e.g. 'UniProtKB:WAP_RAT').\ndb : str, optional\n    Database name to search in; defaults to 'ena_sequence'.\nformat : str, optional\n    The name of the format required; defaults to 'default' (FASTA).\nstyle : str, optional\n    The name of the style required ('raw', 'default', 'html'); defaults to 'raw'.\npageHtml : bool, optional\n    If True, return the content as an HTML page.\n\nReturns:\n--------\nstr\n    The response content in the requested format and style.\n\nExamples:\n--------\n>>> bioservices.DBFetch.fetch(query=\"P53503\", db=\"uniprot\", format=\"fasta\")"
    },
    "get_all_database_info": {
      "Parameters": [],
      "Returns": {
        "type": "dict",
        "description": "A dictionary of data structures describing the available databases, including formats and result styles."
      },
      "api_type": "method",
      "api_name": "bioservices.DBFetch.get_all_database_info",
      "api_calling": "bioservices.DBFetch.get_all_database_info()",
      "example": "bioservices.DBFetch.get_all_database_info()",
      "description": "Get details of all available databases, including formats and result styles.",
      "Docstring": "Get details of all available databases, including formats and result styles.\n\n\nReturns:\n--------\ndict\n    A dictionary of data structures describing the available databases, including formats and result styles.\n\nExamples:\n--------\n>>> bioservices.DBFetch.get_all_database_info()"
    },
    "get_database_format_styles": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Database name to get available styles for (e.g. 'uniprotkb')."
        },
        {
          "name": "format",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The data format to get available styles for (e.g. 'fasta')."
        }
      ],
      "Returns": {
        "type": "list[str]",
        "description": "An array of strings containing the style names available for the specified database and format."
      },
      "api_type": "method",
      "api_name": "bioservices.DBFetch.get_database_format_styles",
      "api_calling": "bioservices.DBFetch.get_database_format_styles(db=$, format=$)",
      "example": "bioservices.DBFetch.get_database_format_styles(db='uniprotkb', format='fasta')",
      "description": "Get a list of style names available for a given database and format.",
      "Docstring": "Get a list of style names available for a given database and format.\n\nParameters:\n-----------\ndb : str\n    Database name to get available styles for (e.g. 'uniprotkb').\nformat : str\n    The data format to get available styles for (e.g. 'fasta').\n\nReturns:\n--------\nlist[str]\n    An array of strings containing the style names available for the specified database and format.\n\nExamples:\n--------\n>>> bioservices.DBFetch.get_database_format_styles(db='uniprotkb', format='fasta')"
    },
    "get_database_formats": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Valid database name."
        }
      ],
      "Returns": {
        "type": "list[str]",
        "description": "A list of format names available for the specified database."
      },
      "api_type": "method",
      "api_name": "bioservices.DBFetch.get_database_formats",
      "api_calling": "bioservices.DBFetch.get_database_formats(db=$)",
      "example": "bioservices.DBFetch.get_database_formats(db='uniprotkb')",
      "description": "Get a list of format names for a given database.",
      "Docstring": "Get a list of format names for a given database.\n\nParameters:\n-----------\ndb : str\n    Valid database name.\n\nReturns:\n--------\nlist[str]\n    A list of format names available for the specified database.\n\nExamples:\n--------\n>>> bioservices.DBFetch.get_database_formats(db='uniprotkb')"
    },
    "get_database_info": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "A valid database name to retrieve information for."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing details describing the specified database, including formats and styles."
      },
      "api_type": "method",
      "api_name": "bioservices.DBFetch.get_database_info",
      "api_calling": "bioservices.DBFetch.get_database_info(db=$)",
      "example": "db.get_database_info(db='uniprotkb')",
      "description": "Get details describing a specific database, including data formats and available styles.",
      "Docstring": "Get details describing a specific database, including data formats and available styles.\n\nParameters:\n-----------\ndb : str, optional\n    A valid database name to retrieve information for.\n\nReturns:\n--------\ndict\n    A dictionary containing details describing the specified database, including formats and styles.\n\nExamples:\n--------\n>>> db.get_database_info(db='uniprotkb')"
    },
    "supported_databases": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of database names available for usage with the DBFetch service."
      },
      "api_type": "property",
      "api_name": "bioservices.DBFetch.supported_databases",
      "api_calling": "bioservices.DBFetch.supported_databases",
      "example": "bioservices.DBFetch.supported_databases",
      "description": "Alias to getSupportedDBs property. Returns a list of database names available for usage with the DBFetch service.",
      "Docstring": "Alias to getSupportedDBs property. Returns a list of database names available for usage with the DBFetch service.\n\n\nReturns:\n--------\nlist\n    A list of database names available for usage with the DBFetch service.\n\nExamples:\n--------\n>>> bioservices.DBFetch.supported_databases"
    }
  },
  "ena": {
    "get_data": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the data to retrieve, e.g., sequence ID."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The format of the retrieved data, e.g., xml, text, fasta etc."
        },
        {
          "name": "fasta_range",
          "type": "list",
          "default": "None",
          "optional": true,
          "description": "Subsequence ranges for fasta data, e.g., bases [3, 63]."
        },
        {
          "name": "expanded",
          "type": "bool",
          "default": "None",
          "optional": true,
          "description": "Whether to retrieve expanded CON records."
        },
        {
          "name": "header",
          "type": "bool",
          "default": "None",
          "optional": true,
          "description": "If set, retrieves the sequence header."
        },
        {
          "name": "download",
          "type": "bool",
          "default": "None",
          "optional": true,
          "description": "Determines if the data should be downloaded directly."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "The retrieved data in the requested format (e.g., XML, text)."
      },
      "api_type": "method",
      "api_name": "bioservices.ENA.get_data",
      "api_calling": "bioservices.ENA.get_data(identifier=$, frmt=$, fasta_range=$, expanded=$, header=$, download=$)",
      "example": "bioservices.ENA.get_data(identifier='ERA000092', frmt='xml', fasta_range=None, expanded=None, header=None, download=None)",
      "description": "Retrieve data from the ENA database in the desired format and configuration.",
      "Docstring": "Retrieve data from the ENA database in the desired format and configuration.\n\nParameters:\n-----------\nidentifier : str\n    The identifier of the data to retrieve, e.g., sequence ID.\nfrmt : str\n    The format of the retrieved data, e.g., xml, text, fasta etc.\nfasta_range : list, optional\n    Subsequence ranges for fasta data, e.g., bases [3, 63].\nexpanded : bool, optional\n    Whether to retrieve expanded CON records.\nheader : bool, optional\n    If set, retrieves the sequence header.\ndownload : bool, optional\n    Determines if the data should be downloaded directly.\n\nReturns:\n--------\nstr\n    The retrieved data in the requested format (e.g., XML, text).\n\nExamples:\n--------\n>>> bioservices.ENA.get_data(identifier='ERA000092', frmt='xml', fasta_range=None, expanded=None, header=None, download=None)"
    }
  },
  "eutils": {
    "EFetch": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "the database from which to retrieve UIDs."
        },
        {
          "name": "id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "list of identifiers to be processed."
        },
        {
          "name": "retmode",
          "type": "str",
          "default": "\"text\"",
          "optional": true,
          "description": "output mode, typically 'text' or 'xml'."
        },
        {
          "name": "rettype",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "[kwarg option] output type, for example, 'fasta', 'summary', or 'docsum'."
        },
        {
          "name": "kargs",
          "type": "dict",
          "default": "{}",
          "optional": false,
          "description": "Optional keyword arguments for configuring the query."
        }
      ],
      "Returns": {
        "type": "bytes",
        "description": "output whose type and structure depend on retmode parameter."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.EFetch",
      "api_calling": "bioservices.EUtils.EFetch(db=$, id=$, retmode=$, rettype=$)",
      "example": "bioservices.EUtils.EFetch(db=\"protein\", id=\"34577063\", retmode=\"text\", rettype=\"fasta\")",
      "description": "Access the EFetch E-Utilities to retrieve data from NCBI's Entrez databases.",
      "Docstring": "Access the EFetch E-Utilities to retrieve data from NCBI's Entrez databases.\n\nParameters:\n-----------\ndb : str\n    the database from which to retrieve UIDs.\nid : str\n    list of identifiers to be processed.\nretmode : str, optional\n    output mode, typically 'text' or 'xml'.\nrettype : str, optional\n    [kwarg option] output type, for example, 'fasta', 'summary', or 'docsum'.\nkargs : dict\n    Optional keyword arguments for configuring the query.\n\nReturns:\n--------\nbytes\n    output whose type and structure depend on retmode parameter.\n\nExamples:\n--------\n>>> bioservices.EUtils.EFetch(db=\"protein\", id=\"34577063\", retmode=\"text\", rettype=\"fasta\")"
    },
    "EInfo": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Target database about which to gather statistics. Must be a valid Entrez database name."
        },
        {
          "name": "kargs",
          "type": "dict",
          "default": "{}",
          "optional": false,
          "description": "Optional keyword arguments for configuring the query."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of dictionaries containing database information or a list of all valid databases if the `db` parameter is unset."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.EInfo",
      "api_calling": "bioservices.EUtils.EInfo(db=$)",
      "example": "bioservices.EUtils.EInfo(db=\"taxonomy\")",
      "description": "Provides information about a database from the Entrez system.",
      "Docstring": "Provides information about a database from the Entrez system.\n\nParameters:\n-----------\ndb : str, optional\n    Target database about which to gather statistics. Must be a valid Entrez database name.\nkargs : dict\n    Optional keyword arguments for configuring the query.\n\nReturns:\n--------\nlist[dict]\n    A list of dictionaries containing database information or a list of all valid databases if the `db` parameter is unset.\n\nExamples:\n--------\n>>> bioservices.EUtils.EInfo(db=\"taxonomy\")"
    },
    "ELink": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Database to retrieve results from."
        },
        {
          "name": "dbfrom",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Database containing the input UIDs."
        },
        {
          "name": "id",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "UID list as a single string or a comma-delimited list."
        },
        {
          "name": "cmd",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "[kwarg option] Command mode to specify the function ELink will perform; e.g., 'neighbor', 'prlinks'."
        },
        {
          "name": "kargs",
          "type": "dict",
          "default": "{}",
          "optional": false,
          "description": "Optional keyword arguments for configuring the query."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "The result of the executed `ELink` query as a response XML or text."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.ELink",
      "api_calling": "bioservices.EUtils.ELink(db=$, dbfrom=$, id=$, cmd=$)",
      "example": "bioservices.EUtils.ELink(db='pubmed', dbfrom='nucleotide', id='12345,67890', cmd='neighbor')",
      "description": "Responds to a list of UIDs in a given database with related or linked UIDs in Entrez.",
      "Docstring": "Responds to a list of UIDs in a given database with related or linked UIDs in Entrez.\n\nParameters:\n-----------\ndb : str, optional\n    Database to retrieve results from.\ndbfrom : str, optional\n    Database containing the input UIDs.\nid : str, optional\n    UID list as a single string or a comma-delimited list.\ncmd : str, optional\n    [kwarg option] Command mode to specify the function ELink will perform; e.g., 'neighbor', 'prlinks'.\nkargs : dict\n    Optional keyword arguments for configuring the query.\n\nReturns:\n--------\nstr\n    The result of the executed `ELink` query as a response XML or text.\n\nExamples:\n--------\n>>> bioservices.EUtils.ELink(db='pubmed', dbfrom='nucleotide', id='12345,67890', cmd='neighbor')"
    },
    "EPost": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A string indicating the target NCBI database."
        },
        {
          "name": "id",
          "type": "list",
          "default": null,
          "optional": false,
          "description": "A list of UIDs identifying records in the specified database."
        },
        {
          "name": "kargs",
          "type": "dict",
          "default": null,
          "optional": true,
          "description": "Additional key=value pairs of parameters to be passed in the request."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the WebEnv string and QueryKey."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.EPost",
      "api_calling": "bioservices.EUtils.EPost(db=$, id=$, kargs=$)",
      "example": "bioservices.EUtils.EPost(db='pubmed', id=['12345,67890'])",
      "description": "Stores UIDs on the NCBI History Server and returns WebEnv and QueryKey.",
      "Docstring": "Stores UIDs on the NCBI History Server and returns WebEnv and QueryKey.\n\nParameters:\n-----------\ndb : str\n    A string indicating the target NCBI database.\nid : list\n    A list of UIDs identifying records in the specified database.\nkargs : dict, optional\n    Additional key=value pairs of parameters to be passed in the request.\n\nReturns:\n--------\ndict\n    A dictionary containing the WebEnv string and QueryKey.\n\nExamples:\n--------\n>>> bioservices.EUtils.EPost(db='pubmed', id=['12345,67890'])"
    },
    "ESearch": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid Entrez database in which to perform the search."
        },
        {
          "name": "term",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search term to query the database with, structured according to Entrez specifications."
        },
        {
          "name": "kargs",
          "type": "dict",
          "default": "{}",
          "optional": false,
          "description": "Optional keyword arguments for configuring the query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "List of search results and their metadata."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.ESearch",
      "api_calling": "bioservices.EUtils.ESearch(db=$, term=$, kargs=$)",
      "example": "bioservices.EUtils.ESearch(db='protein', term='human', kargs={'RetMax':10})",
      "description": "Executes a query in the specified database using Entrez ESearch and retrieves relevant results.",
      "Docstring": "Executes a query in the specified database using Entrez ESearch and retrieves relevant results.\n\nParameters:\n-----------\ndb : str\n    A valid Entrez database in which to perform the search.\nterm : str\n    The search term to query the database with, structured according to Entrez specifications.\nkargs : dict\n    Optional keyword arguments for configuring the query.\n\nReturns:\n--------\ndict\n    List of search results and their metadata.\n\nExamples:\n--------\n>>> bioservices.EUtils.ESearch(db='protein', term='human', kargs={'RetMax':10})"
    },
    "ESpell": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Database to search. Valid Entrez database name."
        },
        {
          "name": "term",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Entrez text query. URL encoding is required for special characters."
        },
        {
          "name": "kargs",
          "type": "dict",
          "default": "{}",
          "optional": false,
          "description": "Optional keyword arguments for configuring the query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Contains the original and corrected query spelling."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.ESpell",
      "api_calling": "bioservices.EUtils.ESpell(db=$, term=$)",
      "example": "bioservices.EUtils.ESpell(db=\"pubmed\", term=\"aasthma+OR+alergy\")",
      "description": "Retrieve spelling suggestions for a text query.",
      "Docstring": "Retrieve spelling suggestions for a text query.\n\nParameters:\n-----------\ndb : str\n    Database to search. Valid Entrez database name.\nterm : str\n    Entrez text query. URL encoding is required for special characters.\nkargs : dict\n    Optional keyword arguments for configuring the query.\n\nReturns:\n--------\ndict\n    Contains the original and corrected query spelling.\n\nExamples:\n--------\n>>> bioservices.EUtils.ESpell(db=\"pubmed\", term=\"aasthma+OR+alergy\")"
    },
    "ESummary": {
      "Parameters": [
        {
          "name": "db",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid database name to retrieve UIDs from."
        },
        {
          "name": "id",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "A list or comma-separated string of identifiers to summarize; limited to 200 identifiers."
        },
        {
          "name": "kargs",
          "type": "dict",
          "default": "{}",
          "optional": false,
          "description": "Optional keyword arguments for configuring the query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the summaries of the requested UIDs."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.ESummary",
      "api_calling": "bioservices.EUtils.ESummary(db=$, id=$)",
      "example": "s.ESummary(db='snp', id='7535')",
      "description": "Provides document summaries for a list of input UIDs.",
      "Docstring": "Provides document summaries for a list of input UIDs.\n\nParameters:\n-----------\ndb : str\n    A valid database name to retrieve UIDs from.\nid : str, optional\n    A list or comma-separated string of identifiers to summarize; limited to 200 identifiers.\nkargs : dict\n    Optional keyword arguments for configuring the query.\n\nReturns:\n--------\ndict\n    A dictionary containing the summaries of the requested UIDs.\n\nExamples:\n--------\n>>> s.ESummary(db='snp', id='7535')"
    },
    "databases": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of valid database names."
      },
      "api_type": "property",
      "api_name": "bioservices.EUtils.databases",
      "api_calling": "bioservices.EUtils.databases",
      "example": "bioservices.EUtils.databases",
      "description": "Provides available database names managed by the service.",
      "Docstring": "Provides available database names managed by the service.\n\n\nReturns:\n--------\nlist\n    A list of valid database names.\n\nExamples:\n--------\n>>> bioservices.EUtils.databases"
    },
    "parse_xml": {
      "Parameters": [
        {
          "name": "ret",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The XML string content to be parsed."
        },
        {
          "name": "method",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "The parsing method to utilize, default is the instance's XML parser setting."
        }
      ],
      "Returns": {
        "type": "object",
        "description": "An object representation of the parsed XML data."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.parse_xml",
      "api_calling": "bioservices.EUtils.parse_xml(ret=$, method=$)",
      "example": "bioservices.EUtils.parse_xml(ret=\"<example>data</example>\", method=\"dict\")",
      "description": "Parses the provided XML data using the specified method.",
      "Docstring": "Parses the provided XML data using the specified method.\n\nParameters:\n-----------\nret : str\n    The XML string content to be parsed.\nmethod : str, optional\n    The parsing method to utilize, default is the instance's XML parser setting.\n\nReturns:\n--------\nobject\n    An object representation of the parsed XML data.\n\nExamples:\n--------\n>>> bioservices.EUtils.parse_xml(ret=\"<example>data</example>\", method=\"dict\")"
    },
    "snp_summary": {
      "Parameters": [
        {
          "name": "id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A string representing SNP identifiers, either as a single identifier or a comma-delimited list."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Returns a JSON data structure containing summary information about the specified SNPs."
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.snp_summary",
      "api_calling": "bioservices.EUtils.snp_summary(id=$)",
      "example": "bioservices.EUtils.snp_summary(id=\"123\")",
      "description": "Alias to EFetch for retrieving SNP database summaries.",
      "Docstring": "Alias to EFetch for retrieving SNP database summaries.\n\nParameters:\n-----------\nid : str\n    A string representing SNP identifiers, either as a single identifier or a comma-delimited list.\n\nReturns:\n--------\ndict\n    Returns a JSON data structure containing summary information about the specified SNPs.\n\nExamples:\n--------\n>>> bioservices.EUtils.snp_summary(id=\"123\")"
    },
    "taxonomy_summary": {
      "Parameters": [
        {
          "name": "id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A string or list of strings containing Taxonomy IDs"
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing taxonomy information"
      },
      "api_type": "method",
      "api_name": "bioservices.EUtils.taxonomy_summary",
      "api_calling": "bioservices.EUtils.taxonomy_summary(id=$)",
      "example": "bioservices.EUtils.taxonomy_summary(id=\"9606\")",
      "description": "Alias to EFetch for retrieving taxonomy database summaries.",
      "Docstring": "Alias to EFetch for retrieving taxonomy database summaries.\n\nParameters:\n-----------\nid : str\n    A string or list of strings containing Taxonomy IDs\n\nReturns:\n--------\ndict\n    A dictionary containing taxonomy information\n\nExamples:\n--------\n>>> bioservices.EUtils.taxonomy_summary(id=\"9606\")"
    }
  },
  "hgnc": {
    "fetch": {
      "Parameters": [
        {
          "name": "database",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The top-level field to search within."
        },
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search term; only one query term allowed and no wildcards are accepted."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format of the returned data. Defaults to 'json'."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A JSON object with fields defined by the service\u2019s storedFields (as returned by get_info())."
      },
      "api_type": "method",
      "api_name": "bioservices.HGNC.fetch",
      "api_calling": "bioservices.HGNC.fetch(database=$, query=$, frmt=$)",
      "example": "bioservices.HGNC.fetch('symbol', 'ZNF3')",
      "description": "Retrieve particular records from a searchable field.",
      "Docstring": "Retrieve particular records from a searchable field.\n\nParameters:\n-----------\ndatabase : str\n    The top-level field to search within.\nquery : str\n    The search term; only one query term allowed and no wildcards are accepted.\nfrmt : str, optional\n    Format of the returned data. Defaults to 'json'.\n\nReturns:\n--------\ndict\n    A JSON object with fields defined by the service\u2019s storedFields (as returned by get_info()).\n\nExamples:\n--------\n>>> bioservices.HGNC.fetch('symbol', 'ZNF3')"
    },
    "get_info": {
      "Parameters": [
        {
          "name": "frmt",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format of the returned data. Defaults to 'json'."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A JSON object containing service metadata, including 'lastModified', 'numDoc', 'searchableFields', and 'storedFields'."
      },
      "api_type": "method",
      "api_name": "bioservices.HGNC.get_info",
      "api_calling": "bioservices.HGNC.get_info(frmt=$)",
      "example": "bioservices.HGNC.get_info()",
      "description": "Request information about the HGNC service.",
      "Docstring": "Request information about the HGNC service.\n\nParameters:\n-----------\nfrmt : str, optional\n    Format of the returned data. Defaults to 'json'.\n\nReturns:\n--------\ndict\n    A JSON object containing service metadata, including 'lastModified', 'numDoc', 'searchableFields', and 'storedFields'.\n\nExamples:\n--------\n>>> bioservices.HGNC.get_info()"
    },
    "search": {
      "Parameters": [
        {
          "name": "database_or_query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "The database to search in or the primary query string if only one argument is provided; if omitted, all searchable fields are searched."
        },
        {
          "name": "query",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "The query string to refine the search when specifying a database; optional if a primary query is provided as the first argument."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format of the returned data. Defaults to 'json'."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A JSON object containing search results with fields: 'hgnc_id', 'symbol', and 'score'."
      },
      "api_type": "method",
      "api_name": "bioservices.HGNC.search",
      "api_calling": "bioservices.HGNC.search(database_or_query=$, query=$, frmt=$)",
      "example": "bioservices.HGNC.search('BRAF')\nbioservices.HGNC.search('symbol', 'ZNF*')\nbioservices.HGNC.search('symbol', 'ZNF*+AND+status:Approved')",
      "description": "Search a searchable field for a pattern.",
      "Docstring": "Search a searchable field for a pattern.\n\nParameters:\n-----------\ndatabase_or_query : str, optional\n    The database to search in or the primary query string if only one argument is provided; if omitted, all searchable fields are searched.\nquery : str, optional\n    The query string to refine the search when specifying a database; optional if a primary query is provided as the first argument.\nfrmt : str, optional\n    Format of the returned data. Defaults to 'json'.\n\nReturns:\n--------\ndict\n    A JSON object containing search results with fields: 'hgnc_id', 'symbol', and 'score'.\n\nExamples:\n--------\n>>> bioservices.HGNC.search('BRAF')\nbioservices.HGNC.search('symbol', 'ZNF*')\nbioservices.HGNC.search('symbol', 'ZNF*+AND+status:Approved')"
    }
  },
  "intact_complex": {
    "details": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "optional": false,
          "default": null,
          "description": "Complex identifier, e.g. 'EBI-1163476'"
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Details about the specified complex in JSON format."
      },
      "api_type": "method",
      "api_name": "bioservices.IntactComplex.details",
      "api_calling": "bioservices.HGNC.details(query=$)",
      "example": "bioservices.IntactComplex.details('EBI-1163476')",
      "description": "Return details about a complex.",
      "Docstring": "Return details about a complex.\n\nParameters:\n-----------\nquery : str\n    Complex identifier, e.g. 'EBI-1163476'\n\nReturns:\n--------\ndict\n    Details about the specified complex in JSON format.\n\nExamples:\n--------\n>>> bioservices.IntactComplex.details('EBI-1163476')"
    },
    "search": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "optional": false,
          "default": null,
          "description": "The search query (e.g., 'ndc80')"
        },
        {
          "name": "frmt",
          "type": "str",
          "optional": true,
          "default": "json",
          "description": "Output format, 'json' by default or 'pandas' if Pandas is installed"
        },
        {
          "name": "facets",
          "type": "str",
          "optional": true,
          "default": "None",
          "description": "Comma-separated list of facets"
        },
        {
          "name": "first",
          "type": "int",
          "optional": true,
          "default": "None",
          "description": "Offset of the first record"
        },
        {
          "name": "number",
          "type": "int",
          "optional": true,
          "default": "None",
          "description": "Number of records to return"
        },
        {
          "name": "filters",
          "type": "str",
          "optional": true,
          "default": "None",
          "description": "Filter conditions string"
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Search results for the complex in the specified format."
      },
      "api_type": "method",
      "api_name": "bioservices.IntactComplex.search",
      "api_calling": "bioservices.IntactComplex.search(query=$, frmt=$, facets=$, first=$, number=$, filters=$)",
      "example": "bioservices.IntactComplex.search('ndc80')",
      "description": "Search for a complex inside IntactComplex.",
      "Docstring": "Search for a complex inside IntactComplex.\n\nParameters:\n-----------\nquery : str\n    The search query (e.g., 'ndc80')\nfrmt : str, optional\n    Output format, 'json' by default or 'pandas' if Pandas is installed\nfacets : str, optional\n    Comma-separated list of facets\nfirst : int, optional\n    Offset of the first record\nnumber : int, optional\n    Number of records to return\nfilters : str, optional\n    Filter conditions string\n\nReturns:\n--------\ndict\n    Search results for the complex in the specified format.\n\nExamples:\n--------\n>>> bioservices.IntactComplex.search('ndc80')"
    }
  },
  "omnipath": {
    "get_about": {
      "Parameters": [],
      "Returns": {
        "type": "str",
        "description": "Version information of the OmniPath service."
      },
      "api_type": "method",
      "api_name": "bioservices.OmniPath.get_about",
      "api_calling": "bioservices.OmniPath.get_about()",
      "example": "bioservices.OmniPath.get_about()",
      "description": "Get information about the OmniPath service version.",
      "Docstring": "Get information about the OmniPath service version.\n\n\nReturns:\n--------\nstr\n    Version information of the OmniPath service.\n\nExamples:\n--------\n>>> bioservices.OmniPath.get_about()"
    },
    "get_info": {
      "Parameters": [],
      "Returns": {
        "type": "str",
        "description": "HTML content of the OmniPath API page."
      },
      "api_type": "method",
      "api_name": "bioservices.OmniPath.get_info",
      "api_calling": "bioservices.OmniPath.get_info()",
      "example": "bioservices.OmniPath.get_info()",
      "description": "Return the HTML representation of the OmniPath API documentation.",
      "Docstring": "Return the HTML representation of the OmniPath API documentation.\n\n\nReturns:\n--------\nstr\n    HTML content of the OmniPath API page.\n\nExamples:\n--------\n>>> bioservices.OmniPath.get_info()"
    },
    "get_interactions": {
      "Parameters": [
        {
          "name": "query",
          "type": "str or list",
          "default": "",
          "optional": true,
          "description": "A valid UniProt identifier (e.g., 'P00533'), a list of identifiers, or a comma-separated string. Set to an empty string to download the entire database."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format of the output; 'json' returns a dictionary, 'tsv' returns a TSV table. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'."
        },
        {
          "name": "fields",
          "type": "str or list",
          "default": [],
          "optional": true,
          "description": "Additional fields to include in the output (e.g., 'sources', 'references'). Defaults to an empty list."
        }
      ],
      "Returns": {
        "type": "dict or str",
        "description": "A dictionary of interactions if format is 'json', or a TSV-formatted string if format is 'tsv'."
      },
      "api_type": "method",
      "api_name": "bioservices.OmniPath.get_interactions",
      "api_calling": "bioservices.OmniPath.get_interactions(query=$, frmt=$, fields=$)",
      "example": "bioservices.OmniPath.get_interactions(query='P00533', frmt='json', fields=['sources'])",
      "description": "Fetch interaction data for provided protein identifiers.",
      "Docstring": "Fetch interaction data for provided protein identifiers.\n\nParameters:\n-----------\nquery : str or list, optional\n    A valid UniProt identifier (e.g., 'P00533'), a list of identifiers, or a comma-separated string. Set to an empty string to download the entire database.\nfrmt : str, optional\n    Format of the output; 'json' returns a dictionary, 'tsv' returns a TSV table. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'.\nfields : str or list, optional\n    Additional fields to include in the output (e.g., 'sources', 'references'). Defaults to an empty list.\n\nReturns:\n--------\ndict or str\n    A dictionary of interactions if format is 'json', or a TSV-formatted string if format is 'tsv'.\n\nExamples:\n--------\n>>> bioservices.OmniPath.get_interactions(query='P00533', frmt='json', fields=['sources'])"
    },
    "get_network": {
      "Parameters": [
        {
          "name": "frmt",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format of the response; 'json' returns a dictionary, 'tsv' returns a TSV-formatted string. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'."
        }
      ],
      "Returns": {
        "type": "dict or str",
        "description": "A dictionary of network statistics if format is 'json', or a TSV-formatted string if format is 'tsv'."
      },
      "api_type": "method",
      "api_name": "bioservices.OmniPath.get_network",
      "api_calling": "bioservices.OmniPath.get_network(frmt=$)",
      "example": "bioservices.OmniPath.get_network()",
      "description": "Get basic statistics about the whole network including sources.",
      "Docstring": "Get basic statistics about the whole network including sources.\n\nParameters:\n-----------\nfrmt : str, optional\n    Format of the response; 'json' returns a dictionary, 'tsv' returns a TSV-formatted string. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'.\n\nReturns:\n--------\ndict or str\n    A dictionary of network statistics if format is 'json', or a TSV-formatted string if format is 'tsv'.\n\nExamples:\n--------\n>>> bioservices.OmniPath.get_network()"
    },
    "get_ptms": {
      "Parameters": [
        {
          "name": "query",
          "type": "str or list",
          "default": "",
          "optional": true,
          "description": "A valid UniProt identifier (e.g., 'P00533'), a list of identifiers, or a comma-separated string. Set to an empty string to download the entire database."
        },
        {
          "name": "ptm_type",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Restrict the output to this type of PTM (e.g., 'phosphorylation'). Defaults to None."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format of the output; 'json' returns a dictionary, 'tsv' returns a TSV-formatted string. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'."
        },
        {
          "name": "fields",
          "type": "str or list",
          "default": [],
          "optional": true,
          "description": "Additional fields to include in the output (e.g., 'sources', 'references'). Defaults to an empty list."
        }
      ],
      "Returns": {
        "type": "dict or str",
        "description": "A dictionary of PTM data if format is 'json', or a TSV-formatted string if format is 'tsv'."
      },
      "api_type": "method",
      "api_name": "bioservices.OmniPath.get_ptms",
      "api_calling": "bioservices.OmniPath.get_ptms(query=$, ptm_type=$, frmt=$, fields=$)",
      "example": "bioservices.OmniPath.get_ptms(query='P00533', ptm_type='phosphorylation', fields=['sources'])",
      "description": "List enzymes, substrates, and post-translational modifications (PTMs).",
      "Docstring": "List enzymes, substrates, and post-translational modifications (PTMs).\n\nParameters:\n-----------\nquery : str or list, optional\n    A valid UniProt identifier (e.g., 'P00533'), a list of identifiers, or a comma-separated string. Set to an empty string to download the entire database.\nptm_type : str, optional\n    Restrict the output to this type of PTM (e.g., 'phosphorylation'). Defaults to None.\nfrmt : str, optional\n    Format of the output; 'json' returns a dictionary, 'tsv' returns a TSV-formatted string. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'.\nfields : str or list, optional\n    Additional fields to include in the output (e.g., 'sources', 'references'). Defaults to an empty list.\n\nReturns:\n--------\ndict or str\n    A dictionary of PTM data if format is 'json', or a TSV-formatted string if format is 'tsv'.\n\nExamples:\n--------\n>>> bioservices.OmniPath.get_ptms(query='P00533', ptm_type='phosphorylation', fields=['sources'])"
    },
    "get_resources": {
      "Parameters": [
        {
          "name": "frmt",
          "type": "str",
          "default": "'json'",
          "optional": true,
          "description": "Format of the response; 'json' returns a dictionary, 'tsv' returns a TSV-formatted string. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'."
        }
      ],
      "Returns": {
        "type": "dict or str",
        "description": "A dictionary of resource statistics if format is 'json', or a TSV-formatted string if format is 'tsv'."
      },
      "api_type": "method",
      "api_name": "bioservices.OmniPath.get_resources",
      "api_calling": "bioservices.OmniPath.get_resources(frmt=$)",
      "example": "bioservices.OmniPath.get_resources()",
      "description": "Return statistics about the databases and their contents.",
      "Docstring": "Return statistics about the databases and their contents.\n\nParameters:\n-----------\nfrmt : str, optional\n    Format of the response; 'json' returns a dictionary, 'tsv' returns a TSV-formatted string. Defaults to 'json'. Note, there is an issue using 'tsv' currently, so only use 'json'.\n\nReturns:\n--------\ndict or str\n    A dictionary of resource statistics if format is 'json', or a TSV-formatted string if format is 'tsv'.\n\nExamples:\n--------\n>>> bioservices.OmniPath.get_resources()"
    }
  },
  "pathwaycommons": {
    "default_extension": {
      "Parameters": [],
      "Returns": {
        "type": "str",
        "description": "The current default extension for data requests."
      },
      "api_type": "property",
      "api_name": "bioservices.PathwayCommons.default_extension",
      "api_calling": "bioservices.PathwayCommons.default_extension",
      "example": "bioservices.PathwayCommons.default_extension",
      "description": "Returns the current default extension for data requests. Set the default extension using the '_set_default_ext' method.",
      "Docstring": "Returns the current default extension for data requests. Set the default extension using the '_set_default_ext' method.\n\n\nReturns:\n--------\nstr\n    The current default extension for data requests.\n\nExamples:\n--------\n>>> bioservices.PathwayCommons.default_extension"
    },
    "_set_default_ext": {
      "Parameters": [
        {
          "name": "ext",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The new default extension for data requests. Should be one of 'json' or 'xml'."
        }
      ],
      "Returns": {
        "type": "None",
        "description": "Doesn't return anything. It's a setter method."
      },
      "api_type": "method",
      "api_name": "bioservices.PathwayCommons._set_default_ext",
      "api_calling": "bioservices.PathwayCommons._set_default_ext(ext=$)",
      "example": "bioservices.PathwayCommons._set_default_ext('xml')",
      "description": "Sets the default extension for data requests. This method doesn't return anything.",
      "Docstring": "Sets the default extension for data requests. This method doesn't return anything.\n\nParameters:\n-----------\next : str\n    The new default extension for data requests. Should be one of 'json' or 'xml'.\n\nReturns:\n--------\nNone\n    Doesn't return anything. It's a setter method.\n\nExamples:\n--------\n>>> bioservices.PathwayCommons._set_default_ext('xml')"
    },
    "get": {
      "Parameters": [
        {
          "name": "uri",
          "type": "str or list[str]",
          "default": null,
          "optional": false,
          "description": "A valid RDF ID URI or list of URIs for BioPAX elements."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "'BIOPAX'",
          "optional": true,
          "description": "The desired output format, such as 'BIOPAX', 'SIF', 'EXTENDED_BINARY_SIF', etc. Note: some formats may not be applicable and result in 'no result found' errors."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "A representation of the pathway information in the requested format."
      },
      "api_type": "method",
      "api_name": "bioservices.PathwayCommons.get",
      "api_calling": "bioservices.PathwayCommons.get(uri=$, frmt=$)",
      "example": "bioservices.PathwayCommons.get(uri=\"http://identifiers.org/uniprot/Q06609\", frmt=\"BIOPAX\")",
      "description": "Retrieves pathway information for given BioPAX element URIs.",
      "Docstring": "Retrieves pathway information for given BioPAX element URIs.\n\nParameters:\n-----------\nuri : str or list[str]\n    A valid RDF ID URI or list of URIs for BioPAX elements.\nfrmt : str, optional\n    The desired output format, such as 'BIOPAX', 'SIF', 'EXTENDED_BINARY_SIF', etc. Note: some formats may not be applicable and result in 'no result found' errors.\n\nReturns:\n--------\nstr\n    A representation of the pathway information in the requested format.\n\nExamples:\n--------\n>>> bioservices.PathwayCommons.get(uri=\"http://identifiers.org/uniprot/Q06609\", frmt=\"BIOPAX\")"
    },
    "get_sifgraph_common_stream": {
      "Parameters": [
        {
          "name": "source",
          "type": "str or list[str]",
          "default": null,
          "optional": false,
          "description": "Set of gene identifiers (HGNC symbols). Can be a list of identifiers or a single string."
        },
        {
          "name": "limit",
          "type": "int",
          "default": 1,
          "optional": true,
          "description": "Graph traversal depth. A value greater than 1 can produce extensive data or errors. Defaults to 1."
        },
        {
          "name": "direction",
          "type": "str",
          "default": "'DOWNSTREAM'",
          "optional": true,
          "description": "Graph traversal direction. Options include 'BOTHSTREAM', 'UPSTREAM', 'DOWNSTREAM', 'UNDIRECTED'. Defaults to 'DOWNSTREAM'."
        },
        {
          "name": "pattern",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Filter by binary relationship (SIF edge) type(s)."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "The graph in SIF format: lines of relations separated by tabs, ready for visualization tools like Cytoscape."
      },
      "api_type": "method",
      "api_name": "bioservices.PathwayCommons.get_sifgraph_common_stream",
      "api_calling": "bioservices.PathwayCommons.get_sifgraph_common_stream(source=$, limit=$, direction=$, pattern=$)",
      "example": "bioservices.PathwayCommons.get_sifgraph_common_stream(source=['BRD4', 'MYC'], limit=1, direction='DOWNSTREAM')",
      "description": "Identifies the common stream within a sub-network extracted from the Pathway Commons SIF model.",
      "Docstring": "Identifies the common stream within a sub-network extracted from the Pathway Commons SIF model.\n\nParameters:\n-----------\nsource : str or list[str]\n    Set of gene identifiers (HGNC symbols). Can be a list of identifiers or a single string.\nlimit : int, optional\n    Graph traversal depth. A value greater than 1 can produce extensive data or errors. Defaults to 1.\ndirection : str, optional\n    Graph traversal direction. Options include 'BOTHSTREAM', 'UPSTREAM', 'DOWNSTREAM', 'UNDIRECTED'. Defaults to 'DOWNSTREAM'.\npattern : str, optional\n    Filter by binary relationship (SIF edge) type(s).\n\nReturns:\n--------\nstr\n    The graph in SIF format: lines of relations separated by tabs, ready for visualization tools like Cytoscape.\n\nExamples:\n--------\n>>> bioservices.PathwayCommons.get_sifgraph_common_stream(source=['BRD4', 'MYC'], limit=1, direction='DOWNSTREAM')"
    },
    "get_sifgraph_neighborhood": {
      "Parameters": [
        {
          "name": "source",
          "type": "str or list[str]",
          "default": null,
          "optional": false,
          "description": "Set of gene identifiers (HGNC symbols). Can be a list of identifiers or a single string."
        },
        {
          "name": "limit",
          "type": "int",
          "default": 1,
          "optional": true,
          "description": "Graph traversal depth. Values > 1 may result in large outputs or errors. Defaults to 1."
        },
        {
          "name": "direction",
          "type": "str",
          "default": "'BOTHSTREAM'",
          "optional": true,
          "description": "Graph traversal direction: 'BOTHSTREAM', 'UPSTREAM', 'DOWNSTREAM', or 'UNDIRECTED'. Defaults to 'BOTHSTREAM'."
        },
        {
          "name": "pattern",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Filter by binary relationship (SIF edge) type(s)."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "The graph in SIF format: lines of relations separated by tabs, suitable for Cytoscape."
      },
      "api_type": "method",
      "api_name": "bioservices.PathwayCommons.get_sifgraph_neighborhood",
      "api_calling": "bioservices.PathwayCommons.get_sifgraph_neighborhood(source=$, limit=$, direction=$, pattern=$)",
      "example": "bioservices.PathwayCommons.get_sifgraph_neighborhood(source='BRD4', limit=1)",
      "description": "Retrieves the neighborhood sub-network from the Pathway Commons SIF graph.",
      "Docstring": "Retrieves the neighborhood sub-network from the Pathway Commons SIF graph.\n\nParameters:\n-----------\nsource : str or list[str]\n    Set of gene identifiers (HGNC symbols). Can be a list of identifiers or a single string.\nlimit : int, optional\n    Graph traversal depth. Values > 1 may result in large outputs or errors. Defaults to 1.\ndirection : str, optional\n    Graph traversal direction: 'BOTHSTREAM', 'UPSTREAM', 'DOWNSTREAM', or 'UNDIRECTED'. Defaults to 'BOTHSTREAM'.\npattern : str, optional\n    Filter by binary relationship (SIF edge) type(s).\n\nReturns:\n--------\nstr\n    The graph in SIF format: lines of relations separated by tabs, suitable for Cytoscape.\n\nExamples:\n--------\n>>> bioservices.PathwayCommons.get_sifgraph_neighborhood(source='BRD4', limit=1)"
    },
    "get_sifgraph_pathsbetween": {
      "Parameters": [
        {
          "name": "source",
          "type": "str or list[str]",
          "default": null,
          "optional": false,
          "description": "Set of gene identifiers (HGNC symbols). Can be a list or a single string."
        },
        {
          "name": "limit",
          "type": "int",
          "default": 1,
          "optional": true,
          "description": "Graph traversal depth. Values > 1 may yield extensive data or errors. Defaults to 1."
        },
        {
          "name": "directed",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Whether to consider directionality: True for downstream/upstream, False for undirected. Defaults to False."
        },
        {
          "name": "pattern",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Filter by SIF edge types (e.g., 'BOTHSTREAM', 'UPSTREAM')."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "The graph in SIF format: lines of relations separated by tabs, suitable for Cytoscape."
      },
      "api_type": "method",
      "api_name": "bioservices.PathwayCommons.get_sifgraph_pathsbetween",
      "api_calling": "bioservices.PathwayCommons.get_sifgraph_pathsbetween(source=$, limit=$, directed=$, pattern=$)",
      "example": "bioservices.PathwayCommons.get_sifgraph_pathsbetween(source=['BRD4', 'MYC'], limit=2, directed=True)",
      "description": "Identifies paths between gene identifiers within the Pathway Commons SIF graph.",
      "Docstring": "Identifies paths between gene identifiers within the Pathway Commons SIF graph.\n\nParameters:\n-----------\nsource : str or list[str]\n    Set of gene identifiers (HGNC symbols). Can be a list or a single string.\nlimit : int, optional\n    Graph traversal depth. Values > 1 may yield extensive data or errors. Defaults to 1.\ndirected : bool, optional\n    Whether to consider directionality: True for downstream/upstream, False for undirected. Defaults to False.\npattern : str, optional\n    Filter by SIF edge types (e.g., 'BOTHSTREAM', 'UPSTREAM').\n\nReturns:\n--------\nstr\n    The graph in SIF format: lines of relations separated by tabs, suitable for Cytoscape.\n\nExamples:\n--------\n>>> bioservices.PathwayCommons.get_sifgraph_pathsbetween(source=['BRD4', 'MYC'], limit=2, directed=True)"
    },
    "get_sifgraph_pathsfromto": {
      "Parameters": [
        {
          "name": "source",
          "type": "str or list[str]",
          "default": null,
          "optional": false,
          "description": "Set of starting gene identifiers (HGNC symbols). Can be a list or a single string."
        },
        {
          "name": "target",
          "type": "str or list[str]",
          "default": null,
          "optional": false,
          "description": "Set of target gene identifiers. Can be a list or a single string."
        },
        {
          "name": "limit",
          "type": "int",
          "default": 1,
          "optional": true,
          "description": "Graph traversal depth. Values > 1 may yield extensive data or errors. Defaults to 1."
        },
        {
          "name": "pattern",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Filter by SIF edge types (e.g., 'UPSTREAM', 'DOWNSTREAM')."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "The graph in SIF format: lines of relations separated by tabs, suitable for Cytoscape."
      },
      "api_type": "method",
      "api_name": "bioservices.PathwayCommons.get_sifgraph_pathsfromto",
      "api_calling": "bioservices.PathwayCommons.get_sifgraph_pathsfromto(source=$, target=$, limit=$, pattern=$)",
      "example": "bioservices.PathwayCommons.get_sifgraph_pathsfromto(source=['BRD4'], target=['MYC'], limit=2, pattern='INTERACTS_WITH')",
      "description": "Finds paths from source to target gene identifiers, extracting a sub-network in SIF format.",
      "Docstring": "Finds paths from source to target gene identifiers, extracting a sub-network in SIF format.\n\nParameters:\n-----------\nsource : str or list[str]\n    Set of starting gene identifiers (HGNC symbols). Can be a list or a single string.\ntarget : str or list[str]\n    Set of target gene identifiers. Can be a list or a single string.\nlimit : int, optional\n    Graph traversal depth. Values > 1 may yield extensive data or errors. Defaults to 1.\npattern : str, optional\n    Filter by SIF edge types (e.g., 'UPSTREAM', 'DOWNSTREAM').\n\nReturns:\n--------\nstr\n    The graph in SIF format: lines of relations separated by tabs, suitable for Cytoscape.\n\nExamples:\n--------\n>>> bioservices.PathwayCommons.get_sifgraph_pathsfromto(source=['BRD4'], target=['MYC'], limit=2, pattern='INTERACTS_WITH')"
    }
  },
  "pdbe": {
    "get_assembly": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Information for each assembly, broken down at the entity level, including molecule name, type, class, chains of occurrence, and copy counts."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_assembly",
      "api_calling": "bioservices.PDBe.get_assembly(query=$)",
      "example": "bioservices.PDBe.get_assembly(query='1cbs')",
      "description": "Provides information for each assembly of a given PDB ID. This information is broken down at the entity level and includes the molecule name, type, class, chains of occurrence, and copy counts.",
      "Docstring": "Provides information for each assembly of a given PDB ID. This information is broken down at the entity level and includes the molecule name, type, class, chains of occurrence, and copy counts.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    Information for each assembly, broken down at the entity level, including molecule name, type, class, chains of occurrence, and copy counts.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_assembly(query='1cbs')"
    },
    "get_binding_sites": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing STRUCT_SITE records: ligand identifiers, residues in the site, descriptions, etc., for the specified PDB entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_binding_sites",
      "api_calling": "bioservices.PDBe.get_binding_sites(query=$)",
      "example": "bioservices.PDBe.get_binding_sites(query='1cbs')",
      "description": "Provides details on binding sites in the entry, corresponding to STRUCT_SITE records in PDB files or mmCIF equivalents, including ligands, residues in the site, and descriptions.",
      "Docstring": "Provides details on binding sites in the entry, corresponding to STRUCT_SITE records in PDB files or mmCIF equivalents, including ligands, residues in the site, and descriptions.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing STRUCT_SITE records: ligand identifiers, residues in the site, descriptions, etc., for the specified PDB entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_binding_sites(query='1cbs')"
    },
    "get_drugbank_annotation": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing DrugBank annotations of all bound ligands in the specified PDB entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_drugbank_annotation",
      "api_calling": "bioservices.PDBe.get_drugbank_annotation(query=$)",
      "example": "bioservices.PDBe.get_drugbank_annotation(query='5hht')",
      "description": "Provides DrugBank annotation of all ligands (bound) within the entry.",
      "Docstring": "Provides DrugBank annotation of all ligands (bound) within the entry.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing DrugBank annotations of all bound ligands in the specified PDB entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_drugbank_annotation(query='5hht')"
    },
    "get_electron_density_statistics": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing detailed statistics for the electron density map of the specified PDB entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_electron_density_statistics",
      "api_calling": "bioservices.PDBe.get_electron_density_statistics(query=$)",
      "example": "bioservices.PDBe.get_electron_density_statistics(query='1cbs')",
      "description": "Provides statistics for electron density maps for the specified PDB entry.",
      "Docstring": "Provides statistics for electron density maps for the specified PDB entry.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing detailed statistics for the electron density map of the specified PDB entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_electron_density_statistics(query='1cbs')"
    },
    "get_experiment": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary with separate entries for each experiment: X-ray diffraction (resolution, spacegroup, cell dimensions, R and Rfree, refinement program), NMR (spectrometer, sample, spectra, refinement), and EM (specimen, imaging, acquisition, reconstruction, fitting)."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_experiment",
      "api_calling": "bioservices.PDBe.get_experiment(query=$)",
      "example": "bioservices.PDBe.get_experiment(query='1cbs')",
      "description": "Provides details of experiments carried out in determining the structure of the entry. Each experiment is described separately: for X-ray diffraction, resolution, spacegroup, cell dimensions, R/Rfree, refinement program; for NMR, spectrometer, sample, spectra, refinement; for EM, specimen, imaging, acquisition, reconstruction, and fitting details.",
      "Docstring": "Provides details of experiments carried out in determining the structure of the entry. Each experiment is described separately: for X-ray diffraction, resolution, spacegroup, cell dimensions, R/Rfree, refinement program; for NMR, spectrometer, sample, spectra, refinement; for EM, specimen, imaging, acquisition, reconstruction, and fitting details.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary with separate entries for each experiment: X-ray diffraction (resolution, spacegroup, cell dimensions, R and Rfree, refinement program), NMR (spectrometer, sample, spectra, refinement), and EM (specimen, imaging, acquisition, reconstruction, fitting).\n\nExamples:\n--------\n>>> bioservices.PDBe.get_experiment(query='1cbs')"
    },
    "get_files": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing URLs and labels for files related to the PDB entry, including mmCIF files, biological assemblies, FASTA sequences, SIFTS cross-reference XML, validation XML, structure factor files, NMR constraint files, etc."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_files",
      "api_calling": "bioservices.PDBe.get_files(query=$)",
      "example": "bioservices.PDBe.get_files(query='1cbs')",
      "description": "Provides URLs and brief descriptions (labels) for files related to a PDB entry, including mmCIF files, biological assembly files, FASTA sequences, SIFTS cross-reference XML, validation XML, X-ray structure factor files, and NMR experimental constraint files.",
      "Docstring": "Provides URLs and brief descriptions (labels) for files related to a PDB entry, including mmCIF files, biological assembly files, FASTA sequences, SIFTS cross-reference XML, validation XML, X-ray structure factor files, and NMR experimental constraint files.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing URLs and labels for files related to the PDB entry, including mmCIF files, biological assemblies, FASTA sequences, SIFTS cross-reference XML, validation XML, structure factor files, NMR constraint files, etc.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_files(query='1cbs')"
    },
    "get_ligand_monomers": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing modeled instances of ligands (bound molecules that are not waters) for the specified PDB entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_ligand_monomers",
      "api_calling": "bioservices.PDBe.get_ligand_monomers(query=$)",
      "example": "bioservices.PDBe.get_ligand_monomers(query='1cbs')",
      "description": "Provides a list of modeled instances of ligands (bound molecules that are not waters) within the specified PDB entry.",
      "Docstring": "Provides a list of modeled instances of ligands (bound molecules that are not waters) within the specified PDB entry.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing modeled instances of ligands (bound molecules that are not waters) for the specified PDB entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_ligand_monomers(query='1cbs')"
    },
    "get_modified_residues": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing modeled instances of modified residues (amino acids or nucleotides) in protein, DNA, or RNA chains for the specified PDB entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_modified_residues",
      "api_calling": "bioservices.PDBe.get_modified_residues(query=$)",
      "example": "bioservices.PDBe.get_modified_residues(query='4v5j')",
      "description": "Provides a list of modeled instances of modified residues (amino acids or nucleotides) in protein, DNA, or RNA chains associated with the specified PDB entry.",
      "Docstring": "Provides a list of modeled instances of modified residues (amino acids or nucleotides) in protein, DNA, or RNA chains associated with the specified PDB entry.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing modeled instances of modified residues (amino acids or nucleotides) in protein, DNA, or RNA chains for the specified PDB entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_modified_residues(query='4v5j')"
    },
    "get_molecules": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing details of molecules (entities) modeled in the entry: entity id, description, type, polymer type, copy count, sample preparation method, source organism, etc."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_molecules",
      "api_calling": "bioservices.PDBe.get_molecules(query=$)",
      "example": "bioservices.PDBe.get_molecules(query='1cbs')",
      "description": "Retrieves details about molecules (entities) modeled in the specified PDB entry, including entity id, description, type, polymer type, number of copies, sample preparation method, and source organism.",
      "Docstring": "Retrieves details about molecules (entities) modeled in the specified PDB entry, including entity id, description, type, polymer type, number of copies, sample preparation method, and source organism.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing details of molecules (entities) modeled in the entry: entity id, description, type, polymer type, copy count, sample preparation method, source organism, etc.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_molecules(query='1cbs')"
    },
    "get_mutated_residues": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing modeled instances of mutated residues (amino acids or nucleotides) in protein, DNA, or RNA chains for the specified entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_mutated_residues",
      "api_calling": "bioservices.PDBe.get_mutated_residues(query=$)",
      "example": "bioservices.PDBe.get_mutated_residues(query='1bgj')",
      "description": "Provides a list of modeled instances of mutated residues (amino acids or nucleotides) in protein, DNA, or RNA chains for the specified PDB entry.",
      "Docstring": "Provides a list of modeled instances of mutated residues (amino acids or nucleotides) in protein, DNA, or RNA chains for the specified PDB entry.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing modeled instances of mutated residues (amino acids or nucleotides) in protein, DNA, or RNA chains for the specified entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_mutated_residues(query='1bgj')"
    },
    "get_observed_ranges": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing observed ranges, i.e., segments of structural coverage of polymeric molecules, that are modeled fully or partly for the specified entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_observed_ranges",
      "api_calling": "bioservices.PDBe.get_observed_ranges(query=$)",
      "example": "bioservices.PDBe.get_observed_ranges(query='1cbs')",
      "description": "Provides observed ranges, i.e., segments of structural coverage of polymeric molecules that are modeled fully or partly, for the specified PDB entry.",
      "Docstring": "Provides observed ranges, i.e., segments of structural coverage of polymeric molecules that are modeled fully or partly, for the specified PDB entry.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing observed ranges, i.e., segments of structural coverage of polymeric molecules, that are modeled fully or partly for the specified entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_observed_ranges(query='1cbs')"
    },
    "get_observed_ranges_in_pdb_chain": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        },
        {
          "name": "chain_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A single-character PDB chain ID identifying the chain within the entry."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing observed ranges for the specified chain of the PDB entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_observed_ranges_in_pdb_chain",
      "api_calling": "bioservices.PDBe.get_observed_ranges_in_pdb_chain(query=$, chain_id=$)",
      "example": "bioservices.PDBe.get_observed_ranges_in_pdb_chain(query='1cbs', chain_id='A')",
      "description": "Provides observed ranges, i.e., segments of structural coverage of polymeric molecules, for a specific chain in the PDB entry.",
      "Docstring": "Provides observed ranges, i.e., segments of structural coverage of polymeric molecules, for a specific chain in the PDB entry.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\nchain_id : str\n    A single-character PDB chain ID identifying the chain within the entry.\n\nReturns:\n--------\ndict\n    A dictionary containing observed ranges for the specified chain of the PDB entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_observed_ranges_in_pdb_chain(query='1cbs', chain_id='A')"
    },
    "get_observed_residues_ratio": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing the ratio of observed residues for each chain in each molecule of the entry, sorted by observed_ratio (descending), partial_ratio (ascending), and number_residues (descending)."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_observed_residues_ratio",
      "api_calling": "bioservices.PDBe.get_observed_residues_ratio(query=$)",
      "example": "bioservices.PDBe.get_observed_residues_ratio(query='1cbs')",
      "description": "Provides the ratio of observed residues for each chain in each molecule of the specified PDB entry. The list of chains within an entity is sorted by observed_ratio (descending order), partial_ratio (ascending order), and number_residues (descending order).",
      "Docstring": "Provides the ratio of observed residues for each chain in each molecule of the specified PDB entry. The list of chains within an entity is sorted by observed_ratio (descending order), partial_ratio (ascending order), and number_residues (descending order).\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing the ratio of observed residues for each chain in each molecule of the entry, sorted by observed_ratio (descending), partial_ratio (ascending), and number_residues (descending).\n\nExamples:\n--------\n>>> bioservices.PDBe.get_observed_residues_ratio(query='1cbs')"
    },
    "get_related_dataset": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing DOIs for related experimental datasets, including diffraction image data, small-angle scattering data, and electron micrographs."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_related_dataset",
      "api_calling": "bioservices.PDBe.get_related_dataset(query=$)",
      "example": "bioservices.PDBe.get_related_dataset(query='5o8b')",
      "description": "Provides DOIs for related raw experimental datasets, including diffraction image data, small-angle scattering data, and electron micrographs.",
      "Docstring": "Provides DOIs for related raw experimental datasets, including diffraction image data, small-angle scattering data, and electron micrographs.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing DOIs for related experimental datasets, including diffraction image data, small-angle scattering data, and electron micrographs.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_related_dataset(query='5o8b')"
    },
    "get_related_publications": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing publication details from EuroPMC and UniProt, including articles that cite or mention the specified PDB entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_related_publications",
      "api_calling": "bioservices.PDBe.get_related_publications(query=$)",
      "example": "bioservices.PDBe.get_related_publications(query='1cbs')",
      "description": "Returns publications obtained from EuroPMC and UniProt for the specified PDB entry. These include articles that cite the entry's primary citation or mention the entry id without explicit citation.",
      "Docstring": "Returns publications obtained from EuroPMC and UniProt for the specified PDB entry. These include articles that cite the entry's primary citation or mention the entry id without explicit citation.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing publication details from EuroPMC and UniProt, including articles that cite or mention the specified PDB entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_related_publications(query='1cbs')"
    },
    "get_release_status": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing status information (released, obsoleted, on-hold, etc.) and metadata such as authors, title, and experimental method for the specified entry."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_release_status",
      "api_calling": "bioservices.PDBe.get_release_status(query=$)",
      "example": "bioservices.PDBe.get_release_status(query='1cbs')",
      "description": "Provides status information of a PDB entry (released, obsoleted, on-hold, etc.) along with metadata such as authors, title, and experimental method.",
      "Docstring": "Provides status information of a PDB entry (released, obsoleted, on-hold, etc.) along with metadata such as authors, title, and experimental method.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing status information (released, obsoleted, on-hold, etc.) and metadata such as authors, title, and experimental method for the specified entry.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_release_status(query='1cbs')"
    },
    "get_residue_listing": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary listing all residues (modeled or otherwise) in the entry, excluding waters, with details on fraction of expected atoms modeled and alternate conformers."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_residue_listing",
      "api_calling": "bioservices.PDBe.get_residue_listing(query=$)",
      "example": "bioservices.PDBe.get_residue_listing(query='1cbs')",
      "description": "Provides a list of all residues (modeled or otherwise) within a PDB entry, excluding waters, along with details of fraction of expected atoms modeled and any alternate conformers.",
      "Docstring": "Provides a list of all residues (modeled or otherwise) within a PDB entry, excluding waters, along with details of fraction of expected atoms modeled and any alternate conformers.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary listing all residues (modeled or otherwise) in the entry, excluding waters, with details on fraction of expected atoms modeled and alternate conformers.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_residue_listing(query='1cbs')"
    },
    "get_residue_listing_in_pdb_chain": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        },
        {
          "name": "chain_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A single-character PDB chain ID identifying the chain within the entry."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary listing all residues in the specified chain, excluding waters, with details on fraction of expected atoms modeled and alternate conformers."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_residue_listing_in_pdb_chain",
      "api_calling": "bioservices.PDBe.get_residue_listing_in_pdb_chain(query=$, chain_id=$)",
      "example": "bioservices.PDBe.get_residue_listing_in_pdb_chain(query='1cbs', chain_id='A')",
      "description": "Provides all residues (modeled or otherwise) in a specific chain of the PDB entry, excluding waters, along with details of fraction of expected atoms modeled and any alternate conformers.",
      "Docstring": "Provides all residues (modeled or otherwise) in a specific chain of the PDB entry, excluding waters, along with details of fraction of expected atoms modeled and any alternate conformers.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\nchain_id : str\n    A single-character PDB chain ID identifying the chain within the entry.\n\nReturns:\n--------\ndict\n    A dictionary listing all residues in the specified chain, excluding waters, with details on fraction of expected atoms modeled and alternate conformers.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_residue_listing_in_pdb_chain(query='1cbs', chain_id='A')"
    },
    "get_secondary_structure": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing residue ranges of regular secondary structures (alpha helices and beta strands) in the protein chains of the entry. For beta strands, sheet ID identifies the sheet."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_secondary_structure",
      "api_calling": "bioservices.PDBe.get_secondary_structure(query=$)",
      "example": "bioservices.PDBe.get_secondary_structure(query='1cbs')",
      "description": "Provides residue ranges of regular secondary structures (alpha helices and beta strands) found in the protein chains of the specified PDB entry. For beta strands, sheet ID identifies the beta sheet.",
      "Docstring": "Provides residue ranges of regular secondary structures (alpha helices and beta strands) found in the protein chains of the specified PDB entry. For beta strands, sheet ID identifies the beta sheet.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query.\n\nReturns:\n--------\ndict\n    A dictionary containing residue ranges of regular secondary structures (alpha helices and beta strands) in the protein chains of the entry. For beta strands, sheet ID identifies the sheet.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_secondary_structure(query='1cbs')"
    },
    "get_summary": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A 4-character PDB id code specifying the entry to query. Can be a comma-separated string of IDs or a list of PDB id strings."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary summarizing the PDB entry or entries, including title, depositor list, deposition date, release date, latest revision date, experimental method, and related entry list."
      },
      "api_type": "method",
      "api_name": "bioservices.PDBe.get_summary",
      "api_calling": "bioservices.PDBe.get_summary(query=$)",
      "example": "bioservices.PDBe.get_summary(query='1cbs')",
      "description": "Returns summary information for a PDB entry or entries, including title, list of depositors, date of deposition, date of release, date of latest revision, experimental method, and related entries.",
      "Docstring": "Returns summary information for a PDB entry or entries, including title, list of depositors, date of deposition, date of release, date of latest revision, experimental method, and related entries.\n\nParameters:\n-----------\nquery : str\n    A 4-character PDB id code specifying the entry to query. Can be a comma-separated string of IDs or a list of PDB id strings.\n\nReturns:\n--------\ndict\n    A dictionary summarizing the PDB entry or entries, including title, depositor list, deposition date, release date, latest revision date, experimental method, and related entry list.\n\nExamples:\n--------\n>>> bioservices.PDBe.get_summary(query='1cbs')"
    }
  },
  "pride": {
    "get_project": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid PRIDE identifier (e.g., PRD000001)."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing project information, or an empty dictionary if the identifier is invalid."
      },
      "api_type": "method",
      "api_name": "bioservices.PRIDE.get_project",
      "api_calling": "bioservices.PRIDE.get_project(identifier=$)",
      "example": "bioservices.PRIDE.get_project(identifier=\"PRD000001\")",
      "description": "Retrieve project information based on a given accession identifier.",
      "Docstring": "Retrieve project information based on a given accession identifier.\n\nParameters:\n-----------\nidentifier : str\n    A valid PRIDE identifier (e.g., PRD000001).\n\nReturns:\n--------\ndict\n    A dictionary containing project information, or an empty dictionary if the identifier is invalid.\n\nExamples:\n--------\n>>> bioservices.PRIDE.get_project(identifier=\"PRD000001\")"
    },
    "get_project_files": {
      "Parameters": [
        {
          "name": "accession",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The accession number to look for."
        },
        {
          "name": "pageSize",
          "type": "int",
          "default": "100",
          "optional": true,
          "description": "How many results to return per page."
        },
        {
          "name": "page",
          "type": "int",
          "default": "0",
          "optional": true,
          "description": "Which page (starting from 0) of the result to return."
        },
        {
          "name": "sortConditions",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Fields for sorting, separated by commas (e.g., submission_date,project_title)."
        },
        {
          "name": "sortDirection",
          "type": "str",
          "default": "'DESC'",
          "optional": true,
          "description": "The sorting order, either ASC or DESC."
        },
        {
          "name": "filters",
          "type": "str",
          "default": "''",
          "optional": true,
          "description": "Criteria to filter the search results in the format field1==value1,field2==value2 (e.g., accession==PRD000001)."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list containing project files meeting the specified criteria."
      },
      "api_type": "method",
      "api_name": "bioservices.PRIDE.get_project_files",
      "api_calling": "bioservices.PRIDE.get_project_files(accession=$, pageSize=$, page=$, sortConditions=$, sortDirection=$, filters=$)",
      "example": "bioservices.PRIDE.get_project_files(accession=\"PRD000001\", pageSize=10, page=1, sortConditions=None, sortDirection='DESC', filters='accession==PRD000001')",
      "description": "Retrieve files associated with a specific project.",
      "Docstring": "Retrieve files associated with a specific project.\n\nParameters:\n-----------\naccession : str\n    The accession number to look for.\npageSize : int, optional\n    How many results to return per page.\npage : int, optional\n    Which page (starting from 0) of the result to return.\nsortConditions : str, optional\n    Fields for sorting, separated by commas (e.g., submission_date,project_title).\nsortDirection : str, optional\n    The sorting order, either ASC or DESC.\nfilters : str, optional\n    Criteria to filter the search results in the format field1==value1,field2==value2 (e.g., accession==PRD000001).\n\nReturns:\n--------\nlist\n    A list containing project files meeting the specified criteria.\n\nExamples:\n--------\n>>> bioservices.PRIDE.get_project_files(accession=\"PRD000001\", pageSize=10, page=1, sortConditions=None, sortDirection='DESC', filters='accession==PRD000001')"
    },
    "get_stats": {
      "Parameters": [
        {
          "name": "name",
          "type": "str",
          "default": "None",
          "optional": true,
          "description": "Name of the statistics to retrieve; leave None to fetch all statistics."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A dictionary containing the retrieved statistics information."
      },
      "api_type": "method",
      "api_name": "bioservices.PRIDE.get_stats",
      "api_calling": "bioservices.PRIDE.get_stats(name=$)",
      "example": "p.get_stats(name=\"SUBMISSIONS_PER_YEAR\")",
      "description": "Retrieve statistics related to PRIDE.",
      "Docstring": "Retrieve statistics related to PRIDE.\n\nParameters:\n-----------\nname : str, optional\n    Name of the statistics to retrieve; leave None to fetch all statistics.\n\nReturns:\n--------\nlist\n    A dictionary containing the retrieved statistics information.\n\nExamples:\n--------\n>>> p.get_stats(name=\"SUBMISSIONS_PER_YEAR\")"
    }
  },
  "psicquic": {
    "activeDBs": {
      "Parameters": [],
      "Returns": {
        "type": "list[str]",
        "description": "List of active molecular interaction databases."
      },
      "api_type": "other",
      "api_name": "bioservices.PSICQUIC.activeDBs",
      "api_calling": "bioservices.PSICQUIC.activeDBs",
      "example": "bioservices.PSICQUIC.activeDBs",
      "description": "Retrieves a list of active molecular interaction databases only.",
      "Docstring": "Retrieves a list of active molecular interaction databases only.\n\n\nReturns:\n--------\nlist[str]\n    List of active molecular interaction databases.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.activeDBs"
    },
    "formats": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of all supported output formats for PSICQUIC queries."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.formats",
      "api_calling": "bioservices.PSICQUIC.formats()",
      "example": "s = PSICQUIC()\nformats = s.formats\nprint(formats)",
      "description": "Retrieve the supported output formats for the PSICQUIC service.",
      "Docstring": "Retrieve the supported output formats for the PSICQUIC service.\n\n\nReturns:\n--------\nlist\n    A list of all supported output formats for PSICQUIC queries.\n\nExamples:\n--------\n>>> s = PSICQUIC()\nformats = s.formats\nprint(formats)"
    },
    "getInteractionCounter": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid query string representing molecular interactions."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Dictionary with active databases as keys and the corresponding number of results as values."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.getInteractionCounter",
      "api_calling": "bioservices.PSICQUIC.getInteractionCounter(query=$)",
      "example": "bioservices.PSICQUIC.getInteractionCounter(query='Q9Y266')",
      "description": "Fetches the interaction count from active molecular interaction databases for a given query.",
      "Docstring": "Fetches the interaction count from active molecular interaction databases for a given query.\n\nParameters:\n-----------\nquery : str\n    A valid query string representing molecular interactions.\n\nReturns:\n--------\ndict\n    Dictionary with active databases as keys and the corresponding number of results as values.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.getInteractionCounter(query='Q9Y266')"
    },
    "mappingOneDB": {
      "Parameters": [
        {
          "name": "data",
          "type": "list",
          "default": null,
          "optional": false,
          "description": "The interaction data to be processed."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary mapping interaction identifiers to processed interaction data."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.mappingOneDB",
      "api_calling": "bioservices.PSICQUIC.mappingOneDB(data=$)",
      "example": "bioservices.PSICQUIC.mappingOneDB(data=[('DB1:ID1','DB2:ID2')])",
      "description": "Processes interaction data to extract and map identifiers to processed names.",
      "Docstring": "Processes interaction data to extract and map identifiers to processed names.\n\nParameters:\n-----------\ndata : list\n    The interaction data to be processed.\n\nReturns:\n--------\ndict\n    A dictionary mapping interaction identifiers to processed interaction data.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.mappingOneDB(data=[('DB1:ID1','DB2:ID2')])"
    },
    "postCleaning": {
      "Parameters": [
        {
          "name": "data",
          "type": "list",
          "default": null,
          "optional": false,
          "description": "Data to be processed, represented as a list of entries."
        },
        {
          "name": "keep_only",
          "type": "str",
          "default": "HUMAN",
          "optional": true,
          "description": "Restrict results to entries containing the specified pattern."
        },
        {
          "name": "remove_db",
          "type": "list",
          "default": [
            "chebi",
            "chembl"
          ],
          "optional": true,
          "description": "Databases to exclude from the results; specify as a list of strings."
        },
        {
          "name": "keep_self_loop",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Whether to retain self-loop interactions in the results."
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": true,
          "optional": true,
          "description": "Enable verbose output; display processing details."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "List of cleaned data entries after applying the restrictions."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.postCleaning",
      "api_calling": "bioservices.PSICQUIC.postCleaning(data=$, keep_only=$, remove_db=$, keep_self_loop=$, verbose=$)",
      "example": "bioservices.PSICQUIC.postCleaning(data=[...], keep_only='HUMAN', remove_db=['chebi','chembl'], keep_self_loop=false, verbose=true)",
      "description": "Performs post-processing and cleaning on the given dataset.",
      "Docstring": "Performs post-processing and cleaning on the given dataset.\n\nParameters:\n-----------\ndata : list\n    Data to be processed, represented as a list of entries.\nkeep_only : str, optional\n    Restrict results to entries containing the specified pattern.\nremove_db : list, optional\n    Databases to exclude from the results; specify as a list of strings.\nkeep_self_loop : bool, optional\n    Whether to retain self-loop interactions in the results.\nverbose : bool, optional\n    Enable verbose output; display processing details.\n\nReturns:\n--------\nlist\n    List of cleaned data entries after applying the restrictions.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.postCleaning(data=[...], keep_only='HUMAN', remove_db=['chebi','chembl'], keep_self_loop=false, verbose=true)"
    },
    "postCleaningAll": {
      "Parameters": [
        {
          "name": "data",
          "type": "dict",
          "default": null,
          "optional": false,
          "description": "A dictionary keyed by source name to be cleaned."
        },
        {
          "name": "keep_only",
          "type": "str",
          "default": "HUMAN",
          "optional": true,
          "description": "A string indicating which entries to retain based on specific criteria."
        },
        {
          "name": "flatten",
          "type": "bool",
          "default": true,
          "optional": true,
          "description": "Boolean indicating if the final result should be consolidated into a flat structure."
        },
        {
          "name": "verbose",
          "type": "bool",
          "default": true,
          "optional": true,
          "description": "If true, detailed information during the process will be displayed."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A cleaned and optionally flattened list of entries."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.postCleaningAll",
      "api_calling": "bioservices.PSICQUIC.postCleaningAll(data=$, keep_only=$, flatten=$, verbose=$)",
      "example": "bioservices.PSICQUIC.postCleaningAll(data={'db': [['HUMAN:1234','HUMAN:5678']]}, keep_only='HUMAN', flatten=true, verbose=true)",
      "description": "Cleans provided data by ignoring specific details and focusing on unique interactions.",
      "Docstring": "Cleans provided data by ignoring specific details and focusing on unique interactions.\n\nParameters:\n-----------\ndata : dict\n    A dictionary keyed by source name to be cleaned.\nkeep_only : str, optional\n    A string indicating which entries to retain based on specific criteria.\nflatten : bool, optional\n    Boolean indicating if the final result should be consolidated into a flat structure.\nverbose : bool, optional\n    If true, detailed information during the process will be displayed.\n\nReturns:\n--------\nlist\n    A cleaned and optionally flattened list of entries.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.postCleaningAll(data={'db': [['HUMAN:1234','HUMAN:5678']]}, keep_only='HUMAN', flatten=true, verbose=true)"
    },
    "preCleaning": {
      "Parameters": [
        {
          "name": "data",
          "type": "list",
          "default": null,
          "optional": false,
          "description": "A list containing interaction entries to be processed."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A filtered list excluding entries with invalid identifiers."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.preCleaning",
      "api_calling": "bioservices.PSICQUIC.preCleaning(data=$)",
      "example": "bioservices.PSICQUIC.preCleaning(data=[[\"id1\",\"id2\"],[\"-\",\"id3\"],[\"id4\",\"-\"]])",
      "description": "Filters out invalid entries from the provided data based on specific identifier criteria.",
      "Docstring": "Filters out invalid entries from the provided data based on specific identifier criteria.\n\nParameters:\n-----------\ndata : list\n    A list containing interaction entries to be processed.\n\nReturns:\n--------\nlist\n    A filtered list excluding entries with invalid identifiers.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.preCleaning(data=[[\"id1\",\"id2\"],[\"-\",\"id3\"],[\"id4\",\"-\"]])"
    },
    "print_status": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Outputs the available services in a tabulated format."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.print_status",
      "api_calling": "bioservices.PSICQUIC.print_status()",
      "example": "s.print_status()",
      "description": "Prints the services that are available.",
      "Docstring": "Prints the services that are available.\n\n\nReturns:\n--------\nNone\n    Outputs the available services in a tabulated format.\n\nExamples:\n--------\n>>> s.print_status()"
    },
    "query": {
      "Parameters": [
        {
          "name": "service",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A registered service name to query."
        },
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid query string formatted according to the PSICQUIC specifications."
        },
        {
          "name": "output",
          "type": "str",
          "default": "tab25",
          "optional": true,
          "description": "Output format; valid formats include 'tab25', 'xml25', and others."
        },
        {
          "name": "version",
          "type": "str",
          "default": "current",
          "optional": true,
          "description": "Version of the PSICQUIC specification to use; default is 'current'."
        },
        {
          "name": "firstResult",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "0-based index of the first result to fetch."
        },
        {
          "name": "maxResults",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "Maximum number of results to fetch."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of interaction entries retrieved based on the query."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.query",
      "api_calling": "bioservices.PSICQUIC.query(service=$, query=$, output=$, version=$, firstResult=$, maxResults=$)",
      "example": "bioservices.PSICQUIC.query(service=\"intact\", query=\"BRCA2\", output=\"tab27\", version=\"current\", firstResult=0, maxResults=100)",
      "description": "Sends a query to a specific PSICQUIC service database.",
      "Docstring": "Sends a query to a specific PSICQUIC service database.\n\nParameters:\n-----------\nservice : str\n    A registered service name to query.\nquery : str\n    A valid query string formatted according to the PSICQUIC specifications.\noutput : str, optional\n    Output format; valid formats include 'tab25', 'xml25', and others.\nversion : str, optional\n    Version of the PSICQUIC specification to use; default is 'current'.\nfirstResult : int, optional\n    0-based index of the first result to fetch.\nmaxResults : int, optional\n    Maximum number of results to fetch.\n\nReturns:\n--------\nlist\n    A list of interaction entries retrieved based on the query.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.query(service=\"intact\", query=\"BRCA2\", output=\"tab27\", version=\"current\", firstResult=0, maxResults=100)"
    },
    "queryAll": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid query string for protein interactions."
        },
        {
          "name": "databases",
          "type": "list",
          "default": null,
          "optional": true,
          "description": "A list of databases to query. Queries all active databases if not provided."
        },
        {
          "name": "output",
          "type": "str",
          "default": "tab25",
          "optional": true,
          "description": "The output format for the query results, such as 'tab25', 'xml25'."
        },
        {
          "name": "version",
          "type": "str",
          "default": "current",
          "optional": true,
          "description": "The version of the database to query."
        },
        {
          "name": "firstResult",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "Start index of results to retrieve."
        },
        {
          "name": "maxResults",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "Maximum number of results."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary with database names as keys and query results as values."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.queryAll",
      "api_calling": "bioservices.PSICQUIC.queryAll(query=$, databases=$, output=$, version=$, firstResult=$, maxResults=$)",
      "example": "bioservices.PSICQUIC.queryAll(query=\"Q9Y266 AND species:9606\", databases=None, output='tab25', version='current', firstResult=0, maxResults=100)",
      "description": "Executes a query on all active databases and returns the results.",
      "Docstring": "Executes a query on all active databases and returns the results.\n\nParameters:\n-----------\nquery : str\n    A valid query string for protein interactions.\ndatabases : list, optional\n    A list of databases to query. Queries all active databases if not provided.\noutput : str, optional\n    The output format for the query results, such as 'tab25', 'xml25'.\nversion : str, optional\n    The version of the database to query.\nfirstResult : int, optional\n    Start index of results to retrieve.\nmaxResults : int, optional\n    Maximum number of results.\n\nReturns:\n--------\ndict\n    A dictionary with database names as keys and query results as values.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.queryAll(query=\"Q9Y266 AND species:9606\", databases=None, output='tab25', version='current', firstResult=0, maxResults=100)"
    },
    "read_registry": {
      "Parameters": [],
      "Returns": {
        "type": "list[str]",
        "description": "A list of active registry entries as strings."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.read_registry",
      "api_calling": "bioservices.PSICQUIC.read_registry()",
      "example": "bioservices.PSICQUIC.read_registry()",
      "description": "Reads and returns the active registry.",
      "Docstring": "Reads and returns the active registry.\n\n\nReturns:\n--------\nlist[str]\n    A list of active registry entries as strings.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.read_registry()"
    },
    "registry": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "List of all the active registry entries in PSICQUIC."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.registry",
      "api_calling": "bioservices.PSICQUIC.registry()",
      "example": "s.registry",
      "description": "Returns the registry containing all PSICQUIC services.",
      "Docstring": "Returns the registry containing all PSICQUIC services.\n\n\nReturns:\n--------\nlist\n    List of all the active registry entries in PSICQUIC.\n\nExamples:\n--------\n>>> s.registry"
    },
    "registry_actives": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of booleans indicating the active state of each service in the registry."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.registry_actives",
      "api_calling": "bioservices.PSICQUIC.registry_actives()",
      "example": "psicquic_instance.registry_actives()",
      "description": "Retrieves the active state of each service in the registry.",
      "Docstring": "Retrieves the active state of each service in the registry.\n\n\nReturns:\n--------\nlist\n    A list of booleans indicating the active state of each service in the registry.\n\nExamples:\n--------\n>>> psicquic_instance.registry_actives()"
    },
    "registry_counts": {
      "Parameters": [],
      "Returns": {
        "type": "dict",
        "description": "A dictionary with service names as keys and the number of registered entries as values."
      },
      "api_type": "other",
      "api_name": "bioservices.PSICQUIC.registry_counts",
      "api_calling": "bioservices.PSICQUIC.registry_counts()",
      "example": "bioservices.PSICQUIC.registry_counts()",
      "description": "Returns a dictionary detailing the entry counts for each service in the registry.",
      "Docstring": "Returns a dictionary detailing the entry counts for each service in the registry.\n\n\nReturns:\n--------\ndict\n    A dictionary with service names as keys and the number of registered entries as values.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.registry_counts()"
    },
    "registry_names": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of names for all available services."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.registry_names",
      "api_calling": "bioservices.PSICQUIC.registry_names()",
      "example": "print(ps.registry_names)",
      "description": "Returns all services available (names).",
      "Docstring": "Returns all services available (names).\n\n\nReturns:\n--------\nlist\n    A list of names for all available services.\n\nExamples:\n--------\n>>> print(ps.registry_names)"
    },
    "registry_restexamples": {
      "Parameters": [],
      "Returns": {
        "type": "dict",
        "description": "A dictionary containing one REST example for each service."
      },
      "api_type": "other",
      "api_name": "bioservices.PSICQUIC.registry_restexamples",
      "api_calling": "bioservices.PSICQUIC.registry_restexamples()",
      "example": "examples = ps.registry_restexamples",
      "description": "Returns a dictionary containing one REST example for each service.",
      "Docstring": "Returns a dictionary containing one REST example for each service.\n\n\nReturns:\n--------\ndict\n    A dictionary containing one REST example for each service.\n\nExamples:\n--------\n>>> examples = ps.registry_restexamples"
    },
    "registry_restricted": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of restricted status of services."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.registry_restricted",
      "api_calling": "bioservices.PSICQUIC.registry_restricted()",
      "example": "",
      "description": "Retrieves and returns the restricted status of the available services via the PSICQUIC interface.",
      "Docstring": "Retrieves and returns the restricted status of the available services via the PSICQUIC interface.\n\n\nReturns:\n--------\nlist\n    A list of restricted status of services.\n\nExamples:\n--------\n>>> "
    },
    "registry_resturls": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "List of URLs corresponding to REST services accessible through the PSICQUIC API."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.registry_resturls",
      "api_calling": "bioservices.PSICQUIC.registry_resturls()",
      "example": "bioservices.PSICQUIC.registry_resturls()",
      "description": "Provides the REST service URLs of active PSICQUIC-registry services.",
      "Docstring": "Provides the REST service URLs of active PSICQUIC-registry services.\n\n\nReturns:\n--------\nlist\n    List of URLs corresponding to REST services accessible through the PSICQUIC API.\n\nExamples:\n--------\n>>> bioservices.PSICQUIC.registry_resturls()"
    },
    "registry_soapurls": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list containing the URLs of WSDL services."
      },
      "api_type": "other",
      "api_name": "bioservices.PSICQUIC.registry_soapurls",
      "api_calling": "bioservices.PSICQUIC.registry_soapurls()",
      "example": "soap_urls = ps.registry_soapurls()",
      "description": "Retrieves the URLs of WSDL (SOAP) web services from the registry.",
      "Docstring": "Retrieves the URLs of WSDL (SOAP) web services from the registry.\n\n\nReturns:\n--------\nlist\n    A list containing the URLs of WSDL services.\n\nExamples:\n--------\n>>> soap_urls = ps.registry_soapurls()"
    },
    "registry_versions": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list containing the versions of each service available in the registry."
      },
      "api_type": "method",
      "api_name": "bioservices.PSICQUIC.registry_versions",
      "api_calling": "bioservices.PSICQUIC.registry_versions()",
      "example": "psicquic_instance.registry_versions()",
      "description": "Returns the version of each available service in the registry.",
      "Docstring": "Returns the version of each available service in the registry.\n\n\nReturns:\n--------\nlist\n    A list containing the versions of each service available in the registry.\n\nExamples:\n--------\n>>> psicquic_instance.registry_versions()"
    }
  },
  "reactome": {
    "get_complex_subunits": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The complex for which subunits are requested."
        },
        {
          "name": "excludeStructures",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Specifies whether contained complexes and entity sets are excluded in the response."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list with the entities contained in a given complex."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_complex_subunits",
      "api_calling": "bioservices.Reactome.get_complex_subunits(identifier=$, excludeStructures=$)",
      "example": ">>> r.get_complex_subunits(\"R-HSA-5674003\", excludeStructures=True)",
      "description": "Retrieves the list of subunits that constitute any given complex. In case the complex comprises other complexes, this method recursively traverses the content returning each contained PhysicalEntity. Contained complexes and entity sets can be excluded by setting the `excludeStructures` optional parameter to `True`.",
      "Docstring": "Retrieves the list of subunits that constitute any given complex. In case the complex comprises other complexes, this method recursively traverses the content returning each contained PhysicalEntity. Contained complexes and entity sets can be excluded by setting the `excludeStructures` optional parameter to `True`.\n\nParameters:\n-----------\nidentifier : str\n    The complex for which subunits are requested.\nexcludeStructures : bool, optional\n    Specifies whether contained complexes and entity sets are excluded in the response.\n\nReturns:\n--------\nlist\n    A list with the entities contained in a given complex.\n\nExamples:\n--------\n>>> >>> r.get_complex_subunits(\"R-HSA-5674003\", excludeStructures=True)"
    },
    "get_complexes": {
      "Parameters": [
        {
          "name": "resource",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The resource of the identifier for which complexes are requested (e.g. UniProt)."
        },
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier for which complexes are requested."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of complexes that contain the given pair of (identifier, resource)."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_complexes",
      "api_calling": "bioservices.Reactome.get_complexes(resource=$, identifier=$)",
      "example": ">>> r.get_complexes(resource='UniProt', identifier='P43403')",
      "description": "Retrieves the list of complexes that contain a given (identifier, resource). The method deconstructs the complexes into all its participants to do so.",
      "Docstring": "Retrieves the list of complexes that contain a given (identifier, resource). The method deconstructs the complexes into all its participants to do so.\n\nParameters:\n-----------\nresource : str\n    The resource of the identifier for which complexes are requested (e.g. UniProt).\nidentifier : str\n    The identifier for which complexes are requested.\n\nReturns:\n--------\nlist\n    A list of complexes that contain the given pair of (identifier, resource).\n\nExamples:\n--------\n>>> >>> r.get_complexes(resource='UniProt', identifier='P43403')"
    },
    "get_discover": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The unique identifier representing the Reactome event (reaction or pathway)."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A JSON-formatted dictionary conforming to schema.org for the specified Reactome event."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_discover",
      "api_calling": "bioservices.Reactome.get_discover(identifier=$)",
      "example": ">>> r.get_discover(\"R-HSA-446203\")",
      "description": "For each event (reaction or pathway), generates a JSON representation conforming to schema.org. This is mainly used by search engines to index the data.",
      "Docstring": "For each event (reaction or pathway), generates a JSON representation conforming to schema.org. This is mainly used by search engines to index the data.\n\nParameters:\n-----------\nidentifier : str\n    The unique identifier representing the Reactome event (reaction or pathway).\n\nReturns:\n--------\ndict\n    A JSON-formatted dictionary conforming to schema.org for the specified Reactome event.\n\nExamples:\n--------\n>>> >>> r.get_discover(\"R-HSA-446203\")"
    },
    "get_diseases": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of disease objects retrieved from the Reactome knowledgebase."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_diseases",
      "api_calling": "bioservices.Reactome.get_diseases()",
      "example": ">>> r.get_diseases()",
      "description": "Retrieve a list of disease objects annotated in the Reactome knowledgebase.",
      "Docstring": "Retrieve a list of disease objects annotated in the Reactome knowledgebase.\n\n\nReturns:\n--------\nlist\n    A list of disease objects retrieved from the Reactome knowledgebase.\n\nExamples:\n--------\n>>> >>> r.get_diseases()"
    },
    "get_diseases_doid": {
      "Parameters": [],
      "Returns": {
        "type": "dict",
        "description": "A dictionary where keys are identifiers and values are Disease Ontology IDs (DOIDs) annotated in Reactome."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_diseases_doid",
      "api_calling": "bioservices.Reactome.get_diseases_doid()",
      "example": ">>> Reactome().get_diseases_doid()",
      "description": "Retrieve the list of Disease Ontology IDs (DOIDs) annotated in Reactome.",
      "Docstring": "Retrieve the list of Disease Ontology IDs (DOIDs) annotated in Reactome.\n\n\nReturns:\n--------\ndict\n    A dictionary where keys are identifiers and values are Disease Ontology IDs (DOIDs) annotated in Reactome.\n\nExamples:\n--------\n>>> >>> Reactome().get_diseases_doid()"
    },
    "get_entity_componentOf": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the entity to be queried."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of larger structures containing the specified entity."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_entity_componentOf",
      "api_calling": "bioservices.Reactome.get_entity_componentOf(identifier=$)",
      "example": ">>> r.get_entity_componentOf(\"R-HSA-199420\")",
      "description": "Retrieves the list of structures (Complexes and Sets) that include the given entity as their component. The list includes only simplified entries (type, names, ids).",
      "Docstring": "Retrieves the list of structures (Complexes and Sets) that include the given entity as their component. The list includes only simplified entries (type, names, ids).\n\nParameters:\n-----------\nidentifier : str\n    The identifier of the entity to be queried.\n\nReturns:\n--------\nlist\n    A list of larger structures containing the specified entity.\n\nExamples:\n--------\n>>> >>> r.get_entity_componentOf(\"R-HSA-199420\")"
    },
    "get_entity_otherForms": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the PhysicalEntity for which other forms are requested."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of alternative forms of the provided PhysicalEntity, each represented as a dictionary."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_entity_otherForms",
      "api_calling": "bioservices.Reactome.get_entity_otherForms(identifier=$)",
      "example": ">>> r.get_entity_otherForms(\"R-HSA-199420\")",
      "description": "Retrieves a list containing all other forms of the given PhysicalEntity. These forms share the same ReferenceEntity identifier.",
      "Docstring": "Retrieves a list containing all other forms of the given PhysicalEntity. These forms share the same ReferenceEntity identifier.\n\nParameters:\n-----------\nidentifier : str\n    The identifier of the PhysicalEntity for which other forms are requested.\n\nReturns:\n--------\nlist\n    A list of alternative forms of the provided PhysicalEntity, each represented as a dictionary.\n\nExamples:\n--------\n>>> >>> r.get_entity_otherForms(\"R-HSA-199420\")"
    },
    "get_event_ancestors": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The event for which the ancestors are requested."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of all possible paths from the requested event to the top-level pathway(s)."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_event_ancestors",
      "api_calling": "bioservices.Reactome.get_event_ancestors(identifier=$)",
      "example": ">>> r.get_event_ancestors(\"R-HSA-5673001\")",
      "description": "Retrieves all possible ancestor paths from a given Reactome event (pathway or reaction) to top-level pathways.",
      "Docstring": "Retrieves all possible ancestor paths from a given Reactome event (pathway or reaction) to top-level pathways.\n\nParameters:\n-----------\nidentifier : str\n    The event for which the ancestors are requested.\n\nReturns:\n--------\nlist\n    A list of all possible paths from the requested event to the top-level pathway(s).\n\nExamples:\n--------\n>>> >>> r.get_event_ancestors(\"R-HSA-5673001\")"
    },
    "get_eventsHierarchy": {
      "Parameters": [
        {
          "name": "species",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Allowed species filter: SpeciesName (e.g., Homo sapiens) or SpeciesTaxId (e.g., 9606)."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of tree structures, each representing the full event hierarchy for the specified species."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_eventsHierarchy",
      "api_calling": "bioservices.Reactome.get_eventsHierarchy(species=$)",
      "example": ">>> r.get_eventsHierarchy('9606')",
      "description": "Retrieves the full event hierarchy for a given species by following all 'hasEvent' relationships. Each tree corresponds to a TopLevelPathway and contains PathwayBrowserNodes with detailed metadata.",
      "Docstring": "Retrieves the full event hierarchy for a given species by following all 'hasEvent' relationships. Each tree corresponds to a TopLevelPathway and contains PathwayBrowserNodes with detailed metadata.\n\nParameters:\n-----------\nspecies : str\n    Allowed species filter: SpeciesName (e.g., Homo sapiens) or SpeciesTaxId (e.g., 9606).\n\nReturns:\n--------\nlist\n    A list of tree structures, each representing the full event hierarchy for the specified species.\n\nExamples:\n--------\n>>> >>> r.get_eventsHierarchy('9606')"
    },
    "get_exporter_diagram": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Event identifier (pathway, subpathway, or reaction) for which the diagram is exported."
        },
        {
          "name": "ext",
          "type": "str",
          "default": "png",
          "optional": true,
          "description": "File extension/format for export (png, jpeg, jpg, svg, gif)."
        },
        {
          "name": "quality",
          "type": "int",
          "default": 5,
          "optional": true,
          "description": "Result image quality between 1 and 10."
        },
        {
          "name": "diagramProfile",
          "type": "str",
          "default": "Modern",
          "optional": true,
          "description": "Diagram color scheme (Modern or Standard)."
        },
        {
          "name": "analysisProfile",
          "type": "str",
          "default": "Standard",
          "optional": true,
          "description": "Analysis color scheme."
        },
        {
          "name": "filename",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Local file path to save the diagram. If omitted, raw binary data is returned."
        }
      ],
      "Returns": {
        "type": "any",
        "description": "Raw binary data of the diagram if not saved; otherwise, returns None."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_exporter_diagram",
      "api_calling": "bioservices.Reactome.get_exporter_diagram(identifier=$, ext=$, quality=$, diagramProfile=$, analysisProfile=$, filename=$)",
      "example": ">>> r.get_exporter_diagram(identifier='R-HSA-5673001', ext='png', quality=5, diagramProfile='Modern', analysisProfile='Standard', filename='diagram.png')",
      "description": "Exports a given pathway diagram to the specified raster format. For subpathways and reactions, the parent pathway is used for rendering.",
      "Docstring": "Exports a given pathway diagram to the specified raster format. For subpathways and reactions, the parent pathway is used for rendering.\n\nParameters:\n-----------\nidentifier : str\n    Event identifier (pathway, subpathway, or reaction) for which the diagram is exported.\next : str, optional\n    File extension/format for export (png, jpeg, jpg, svg, gif).\nquality : int, optional\n    Result image quality between 1 and 10.\ndiagramProfile : str, optional\n    Diagram color scheme (Modern or Standard).\nanalysisProfile : str, optional\n    Analysis color scheme.\nfilename : str, optional\n    Local file path to save the diagram. If omitted, raw binary data is returned.\n\nReturns:\n--------\nany\n    Raw binary data of the diagram if not saved; otherwise, returns None.\n\nExamples:\n--------\n>>> >>> r.get_exporter_diagram(identifier='R-HSA-5673001', ext='png', quality=5, diagramProfile='Modern', analysisProfile='Standard', filename='diagram.png')"
    },
    "get_exporter_fireworks": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Not implemented."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_exporter_fireworks",
      "api_calling": "bioservices.Reactome.get_exporter_fireworks()",
      "example": "",
      "description": "This method is marked as not implemented and does not perform any actions.",
      "Docstring": "This method is marked as not implemented and does not perform any actions.\n\n\nReturns:\n--------\nNone\n    Not implemented.\n\nExamples:\n--------\n>>> "
    },
    "get_exporter_reaction": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Not implemented."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_exporter_reaction",
      "api_calling": "bioservices.Reactome.get_exporter_reaction()",
      "example": "",
      "description": "This method is currently unimplemented and has no functional behavior.",
      "Docstring": "This method is currently unimplemented and has no functional behavior.\n\n\nReturns:\n--------\nNone\n    Not implemented.\n\nExamples:\n--------\n>>> "
    },
    "get_exporter_sbml": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "DbId or StId of the requested database object."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "An SBML-formatted string representing the requested pathway."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_exporter_sbml",
      "api_calling": "bioservices.Reactome.get_exporter_sbml(identifier=$)",
      "example": ">>> r.get_exporter_sbml(identifier=\"R-HSA-68616\")",
      "description": "Exports the given pathway to SBML format.",
      "Docstring": "Exports the given pathway to SBML format.\n\nParameters:\n-----------\nidentifier : str\n    DbId or StId of the requested database object.\n\nReturns:\n--------\nstr\n    An SBML-formatted string representing the requested pathway.\n\nExamples:\n--------\n>>> >>> r.get_exporter_sbml(identifier=\"R-HSA-68616\")"
    },
    "get_interactors_psicquic_molecule_details": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Not implemented."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_interactors_psicquic_molecule_details",
      "api_calling": "bioservices.Reactome.get_interactors_psicquic_molecule_details()",
      "example": "",
      "description": "Retrieve clustered interaction, sorted by score, for a given accession by resource. (Not yet implemented.)",
      "Docstring": "Retrieve clustered interaction, sorted by score, for a given accession by resource. (Not yet implemented.)\n\n\nReturns:\n--------\nNone\n    Not implemented.\n\nExamples:\n--------\n>>> "
    },
    "get_interactors_psicquic_molecule_summary": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Not implemented."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_interactors_psicquic_molecule_summary",
      "api_calling": "bioservices.Reactome.get_interactors_psicquic_molecule_summary()",
      "example": "",
      "description": "Retrieve a summary of a given accession by resource. (Not yet implemented.)",
      "Docstring": "Retrieve a summary of a given accession by resource. (Not yet implemented.)\n\n\nReturns:\n--------\nNone\n    Not implemented.\n\nExamples:\n--------\n>>> "
    },
    "get_interactors_psicquic_resources": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of services available in PSICQUIC registries."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_interactors_psicquic_resources",
      "api_calling": "bioservices.Reactome.get_interactors_psicquic_resources()",
      "example": ">>> Reactome.get_interactors_psicquic_resources()",
      "description": "Retrieve a list of all PSICQUIC Registries services.",
      "Docstring": "Retrieve a list of all PSICQUIC Registries services.\n\n\nReturns:\n--------\nlist\n    A list of services available in PSICQUIC registries.\n\nExamples:\n--------\n>>> >>> Reactome.get_interactors_psicquic_resources()"
    },
    "get_interactors_static_molecule_details": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Not implemented."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_interactors_static_molecule_details",
      "api_calling": "bioservices.Reactome.get_interactors_static_molecule_details()",
      "example": "",
      "description": "Retrieve detailed interaction information of a molecule. (Not yet implemented.)",
      "Docstring": "Retrieve detailed interaction information of a molecule. (Not yet implemented.)\n\n\nReturns:\n--------\nNone\n    Not implemented.\n\nExamples:\n--------\n>>> "
    },
    "get_interactors_static_molecule_pathways": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Not implemented."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_interactors_static_molecule_pathways",
      "api_calling": "bioservices.Reactome.get_interactors_static_molecule_pathways()",
      "example": "",
      "description": "Retrieve a list of lower-level pathways where the interacting molecules can be found. (Not yet implemented.)",
      "Docstring": "Retrieve a list of lower-level pathways where the interacting molecules can be found. (Not yet implemented.)\n\n\nReturns:\n--------\nNone\n    Not implemented.\n\nExamples:\n--------\n>>> "
    },
    "get_interactors_static_molecule_summary": {
      "Parameters": [],
      "Returns": {
        "type": null,
        "description": "Not implemented."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_interactors_static_molecule_summary",
      "api_calling": "bioservices.Reactome.get_interactors_static_molecule_summary()",
      "example": "",
      "description": "Retrieve a summary of a given accession. (Not yet implemented.)",
      "Docstring": "Retrieve a summary of a given accession. (Not yet implemented.)\n\n\nReturns:\n--------\nNone\n    Not implemented.\n\nExamples:\n--------\n>>> "
    },
    "get_mapping_identifier_pathways": {
      "Parameters": [
        {
          "name": "resource",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The resource associated with the identifier (e.g. UniProt)."
        },
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The specific identifier to retrieve pathways for."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of pathways associated with the provided resource and identifier."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_mapping_identifier_pathways",
      "api_calling": "bioservices.Reactome.get_mapping_identifier_pathways(resource=$, identifier=$)",
      "example": ">>> r.get_mapping_identifier_pathways(resource=\"UniProt\", identifier=\"P43403\")",
      "description": "Retrieve the pathways associated with a specific resource and identifier in the Reactome database.",
      "Docstring": "Retrieve the pathways associated with a specific resource and identifier in the Reactome database.\n\nParameters:\n-----------\nresource : str\n    The resource associated with the identifier (e.g. UniProt).\nidentifier : str\n    The specific identifier to retrieve pathways for.\n\nReturns:\n--------\nlist\n    A list of pathways associated with the provided resource and identifier.\n\nExamples:\n--------\n>>> >>> r.get_mapping_identifier_pathways(resource=\"UniProt\", identifier=\"P43403\")"
    },
    "get_mapping_identifier_reactions": {
      "Parameters": [
        {
          "name": "resource",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The resource of the identifier (e.g. UniProt)."
        },
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The specific identifier to retrieve reactions for."
        }
      ],
      "Returns": {
        "type": "json",
        "description": "A JSON object containing mapping information about reactions."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_mapping_identifier_reactions",
      "api_calling": "bioservices.Reactome.get_mapping_identifier_reactions(resource=$, identifier=$)",
      "example": ">>> r.get_mapping_identifier_reactions(\"UniProt\", \"P43403\")",
      "description": "Retrieve mapping information about reactions in Reactome.",
      "Docstring": "Retrieve mapping information about reactions in Reactome.\n\nParameters:\n-----------\nresource : str\n    The resource of the identifier (e.g. UniProt).\nidentifier : str\n    The specific identifier to retrieve reactions for.\n\nReturns:\n--------\njson\n    A JSON object containing mapping information about reactions.\n\nExamples:\n--------\n>>> >>> r.get_mapping_identifier_reactions(\"UniProt\", \"P43403\")"
    },
    "get_pathway_containedEvents": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The unique event identifier for which contained events are requested."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of contained events represented in structured Python objects."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_pathway_containedEvents",
      "api_calling": "bioservices.Reactome.get_pathway_containedEvents(identifier=$)",
      "example": ">>> r.get_pathway_containedEvents(identifier=\"R-HSA-5673001\")",
      "description": "Retrieve all events contained within a specified parent event, recursively traversing subpathways and reactions.",
      "Docstring": "Retrieve all events contained within a specified parent event, recursively traversing subpathways and reactions.\n\nParameters:\n-----------\nidentifier : str\n    The unique event identifier for which contained events are requested.\n\nReturns:\n--------\nlist\n    A list of contained events represented in structured Python objects.\n\nExamples:\n--------\n>>> >>> r.get_pathway_containedEvents(identifier=\"R-HSA-5673001\")"
    },
    "get_pathway_containedEvents_by_attribute": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The event identifier for which the contained events' attributes are requested."
        },
        {
          "name": "attribute",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The attribute to be filtered and returned for each contained event."
        }
      ],
      "Returns": {
        "type": "list[str]",
        "description": "A list of specified attributes for each event contained in the given event."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_pathway_containedEvents_by_attribute",
      "api_calling": "bioservices.Reactome.get_pathway_containedEvents_by_attribute(identifier=$, attribute=$)",
      "example": ">>> r.get_pathway_containedEvents_by_attribute(identifier='R-HSA-5673001', attribute='stId')",
      "description": "Retrieve a specific attribute for events contained within a biological event.",
      "Docstring": "Retrieve a specific attribute for events contained within a biological event.\n\nParameters:\n-----------\nidentifier : str\n    The event identifier for which the contained events' attributes are requested.\nattribute : str\n    The attribute to be filtered and returned for each contained event.\n\nReturns:\n--------\nlist[str]\n    A list of specified attributes for each event contained in the given event.\n\nExamples:\n--------\n>>> >>> r.get_pathway_containedEvents_by_attribute(identifier='R-HSA-5673001', attribute='stId')"
    },
    "get_pathways_low_diagram_entity": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The entity that must be present in the pathways."
        },
        {
          "name": "species",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "The species filter: taxonomy ID (e.g. 9606) or species name (e.g. 'Homo sapiens')."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of lower-level pathways with diagrams containing the specified entity or event."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_pathways_low_diagram_entity",
      "api_calling": "bioservices.Reactome.get_pathways_low_diagram_entity(identifier=$, species=$)",
      "example": ">>> r.get_pathways_low_diagram_entity(identifier=\"R-HSA-199420\", species=\"Homo sapiens\")",
      "description": "Retrieves lower-level pathways that have diagrams and contain the given PhysicalEntity or Event, optionally filtered by species.",
      "Docstring": "Retrieves lower-level pathways that have diagrams and contain the given PhysicalEntity or Event, optionally filtered by species.\n\nParameters:\n-----------\nidentifier : str\n    The entity that must be present in the pathways.\nspecies : str, optional\n    The species filter: taxonomy ID (e.g. 9606) or species name (e.g. 'Homo sapiens').\n\nReturns:\n--------\nlist\n    A list of lower-level pathways with diagrams containing the specified entity or event.\n\nExamples:\n--------\n>>> >>> r.get_pathways_low_diagram_entity(identifier=\"R-HSA-199420\", species=\"Homo sapiens\")"
    },
    "get_pathways_low_diagram_entity_allForms": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the entity or event whose pathways are to be retrieved in all its forms."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list of pathways related to the specified entity, including diagrams, for all its variant forms."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_pathways_low_diagram_entity_allForms",
      "api_calling": "bioservices.Reactome.get_pathways_low_diagram_entity_allForms(identifier=$)",
      "example": ">>> r.get_pathways_low_diagram_entity_allForms(identifier=\"R-HSA-199420\")",
      "description": "Retrieves all lower-level pathways with diagrams containing a given entity or event based on all its variant forms.",
      "Docstring": "Retrieves all lower-level pathways with diagrams containing a given entity or event based on all its variant forms.\n\nParameters:\n-----------\nidentifier : str\n    The identifier of the entity or event whose pathways are to be retrieved in all its forms.\n\nReturns:\n--------\nlist[dict]\n    A list of pathways related to the specified entity, including diagrams, for all its variant forms.\n\nExamples:\n--------\n>>> >>> r.get_pathways_low_diagram_entity_allForms(identifier=\"R-HSA-199420\")"
    },
    "get_pathways_low_entity": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The entity or event which the pathways should contain."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of pathways containing the specified entity or event."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_pathways_low_entity",
      "api_calling": "bioservices.Reactome.get_pathways_low_entity(identifier=$)",
      "example": ">>> r.get_pathways_low_entity(identifier=\"R-HSA-199420\")",
      "description": "Retrieves lower-level pathways that contain a given PhysicalEntity or Event.",
      "Docstring": "Retrieves lower-level pathways that contain a given PhysicalEntity or Event.\n\nParameters:\n-----------\nidentifier : str\n    The entity or event which the pathways should contain.\n\nReturns:\n--------\nlist\n    A list of pathways containing the specified entity or event.\n\nExamples:\n--------\n>>> >>> r.get_pathways_low_entity(identifier=\"R-HSA-199420\")"
    },
    "get_pathways_low_entity_allForms": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The identifier of the entity whose variant pathways are to be retrieved."
        }
      ],
      "Returns": {
        "type": "list[dict]",
        "description": "A list containing pathway information for each associated variant form."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_pathways_low_entity_allForms",
      "api_calling": "bioservices.Reactome.get_pathways_low_entity_allForms(identifier=$)",
      "example": ">>> r.get_pathways_low_entity_allForms(identifier=\"R-HSA-199420\")",
      "description": "Retrieves lower-level pathways containing any variant of a given entity by traversing its variant forms.",
      "Docstring": "Retrieves lower-level pathways containing any variant of a given entity by traversing its variant forms.\n\nParameters:\n-----------\nidentifier : str\n    The identifier of the entity whose variant pathways are to be retrieved.\n\nReturns:\n--------\nlist[dict]\n    A list containing pathway information for each associated variant form.\n\nExamples:\n--------\n>>> >>> r.get_pathways_low_entity_allForms(identifier=\"R-HSA-199420\")"
    },
    "get_pathways_top": {
      "Parameters": [
        {
          "name": "species",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Species identifier (e.g., 'Homo sapiens' or taxonomy ID like '9606')."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A JSON list of top-level pathways for the specified species."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_pathways_top",
      "api_calling": "bioservices.Reactome.get_pathways_top(species=$)",
      "example": ">>> r.get_pathways_top(species=\"Homo sapiens\")",
      "description": "Retrieves the top-level pathways for a given species.",
      "Docstring": "Retrieves the top-level pathways for a given species.\n\nParameters:\n-----------\nspecies : str\n    Species identifier (e.g., 'Homo sapiens' or taxonomy ID like '9606').\n\nReturns:\n--------\nlist\n    A JSON list of top-level pathways for the specified species.\n\nExamples:\n--------\n>>> >>> r.get_pathways_top(species=\"Homo sapiens\")"
    },
    "get_references": {
      "Parameters": [
        {
          "name": "identifier",
          "type": "int",
          "default": null,
          "optional": false,
          "description": "The unique identifier for which reference entities are requested."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of all reference entities associated with the specified identifier."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_references",
      "api_calling": "bioservices.Reactome.get_references(identifier=$)",
      "example": ">>> r.get_references(identifier=15377)",
      "description": "Retrieves a list containing all the reference entities for a given identifier.",
      "Docstring": "Retrieves a list containing all the reference entities for a given identifier.\n\nParameters:\n-----------\nidentifier : int\n    The unique identifier for which reference entities are requested.\n\nReturns:\n--------\nlist\n    A list of all reference entities associated with the specified identifier.\n\nExamples:\n--------\n>>> >>> r.get_references(identifier=15377)"
    },
    "get_species_all": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of all species available in the Reactome database."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_species_all",
      "api_calling": "bioservices.Reactome.get_species_all()",
      "example": ">>> r.get_species_all()",
      "description": "Retrieve the list of all species in Reactome.",
      "Docstring": "Retrieve the list of all species in Reactome.\n\n\nReturns:\n--------\nlist\n    A list of all species available in the Reactome database.\n\nExamples:\n--------\n>>> >>> r.get_species_all()"
    },
    "get_species_main": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "A list of the main (commonly used) species entries."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.get_species_main",
      "api_calling": "bioservices.Reactome.get_species_main()",
      "example": ">>> r.get_species_main()",
      "description": "Retrieves the list of main species in Reactome.",
      "Docstring": "Retrieves the list of main species in Reactome.\n\n\nReturns:\n--------\nlist\n    A list of the main (commonly used) species entries.\n\nExamples:\n--------\n>>> >>> r.get_species_main()"
    },
    "name": {
      "Parameters": [],
      "Returns": {
        "type": "str",
        "description": "The name of the Reactome database."
      },
      "api_type": "other",
      "api_name": "bioservices.Reactome.name",
      "api_calling": "bioservices.Reactome.name",
      "example": ">>> r.name",
      "description": "Retrieve the name of the Reactome database.",
      "Docstring": "Retrieve the name of the Reactome database.\n\n\nReturns:\n--------\nstr\n    The name of the Reactome database.\n\nExamples:\n--------\n>>> >>> r.name"
    },
    "search_facet": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "Faceting information about the Reactome search data."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.search_facet",
      "api_calling": "bioservices.Reactome.search_facet()",
      "example": ">>> Reactome.search_facet()",
      "description": "Retrieves faceting information on the entire Reactome search dataset.",
      "Docstring": "Retrieves faceting information on the entire Reactome search dataset.\n\n\nReturns:\n--------\nlist\n    Faceting information about the Reactome search data.\n\nExamples:\n--------\n>>> >>> Reactome.search_facet()"
    },
    "search_facet_query": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The specific query string to retrieve facet information for."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of facets corresponding to the input query."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.search_facet_query",
      "api_calling": "bioservices.Reactome.search_facet_query(query=$)",
      "example": ">>> r.search_facet_query(query=\"apoptotic\")",
      "description": "Retrieve faceting information for a specific query.",
      "Docstring": "Retrieve faceting information for a specific query.\n\nParameters:\n-----------\nquery : str\n    The specific query string to retrieve facet information for.\n\nReturns:\n--------\nlist\n    A list of facets corresponding to the input query.\n\nExamples:\n--------\n>>> >>> r.search_facet_query(query=\"apoptotic\")"
    },
    "search_query": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search query to retrieve matching results."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of results matching the queried information in Reactome."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.search_query",
      "api_calling": "bioservices.Reactome.search_query(query=$)",
      "example": ">>> reactome.search_query(query=\"apoptosis\")",
      "description": "Queries the Reactome knowledgebase using Solr to retrieve matching results.",
      "Docstring": "Queries the Reactome knowledgebase using Solr to retrieve matching results.\n\nParameters:\n-----------\nquery : str\n    The search query to retrieve matching results.\n\nReturns:\n--------\nlist\n    A list of results matching the queried information in Reactome.\n\nExamples:\n--------\n>>> >>> reactome.search_query(query=\"apoptosis\")"
    },
    "search_spellcheck": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search term to retrieve spell-check suggestions for."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of possible spell-check suggestions."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.search_spellcheck",
      "api_calling": "bioservices.Reactome.search_spellcheck(query=$)",
      "example": ">>> r.search_spellcheck(query=\"apoptpe\")",
      "description": "Retrieve spell-check suggestions for the provided query.",
      "Docstring": "Retrieve spell-check suggestions for the provided query.\n\nParameters:\n-----------\nquery : str\n    The search term to retrieve spell-check suggestions for.\n\nReturns:\n--------\nlist\n    A list of possible spell-check suggestions.\n\nExamples:\n--------\n>>> >>> r.search_spellcheck(query=\"apoptpe\")"
    },
    "search_suggest": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search term for which suggestions are requested."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "A list of autosuggestions related to the search term."
      },
      "api_type": "method",
      "api_name": "bioservices.Reactome.search_suggest",
      "api_calling": "bioservices.Reactome.search_suggest(query=$)",
      "example": ">>> r.search_suggest(query=\"apopt\")",
      "description": "Retrieve autosuggestions for a given query.",
      "Docstring": "Retrieve autosuggestions for a given query.\n\nParameters:\n-----------\nquery : str\n    The search term for which suggestions are requested.\n\nReturns:\n--------\nlist\n    A list of autosuggestions related to the search term.\n\nExamples:\n--------\n>>> >>> r.search_suggest(query=\"apopt\")"
    },
    "version": {
      "Parameters": [],
      "Returns": {
        "type": "str",
        "description": "The version of the Reactome database."
      },
      "api_type": "other",
      "api_name": "bioservices.Reactome.version",
      "api_calling": "bioservices.Reactome.version",
      "example": ">>> r.version",
      "description": "Retrieve the version used in the Reactome database.",
      "Docstring": "Retrieve the version used in the Reactome database.\n\n\nReturns:\n--------\nstr\n    The version of the Reactome database.\n\nExamples:\n--------\n>>> >>> r.version"
    }
  },
  "rhea": {
    "get_metabolites": {
      "Parameters": [
        {
          "name": "rxn_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Rhea reaction identifier."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "A dictionary representing metabolites and their stoichiometry in the reaction."
      },
      "api_type": "method",
      "api_name": "bioservices.Rhea.get_metabolites",
      "api_calling": "bioservices.Rhea.get_metabolites(rxn_id=$)",
      "example": "r.get_metabolites('RHEA:12345')",
      "description": "Retrieve participant metabolites from a Rhea reaction ID.",
      "Docstring": "Retrieve participant metabolites from a Rhea reaction ID.\n\nParameters:\n-----------\nrxn_id : str\n    Rhea reaction identifier.\n\nReturns:\n--------\ndict\n    A dictionary representing metabolites and their stoichiometry in the reaction.\n\nExamples:\n--------\n>>> r.get_metabolites('RHEA:12345')"
    },
    "query": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The entry to retrieve in the database."
        },
        {
          "name": "columns",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Comma-separated list of valid columns to include in the output (e.g., 'rhea-id,equation')."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "tsv",
          "optional": true,
          "description": "The format of the returned results; only 'tsv' is currently supported."
        },
        {
          "name": "limit",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "Maximum number of records to retrieve."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "A DataFrame containing the query result."
      },
      "api_type": "method",
      "api_name": "bioservices.Rhea.query",
      "api_calling": "bioservices.Rhea.query(query=$, columns=$, frmt=$, limit=$)",
      "example": "r.query(\"\", columns=\"rhea-id,equation\", limit=10)",
      "description": "Retrieve a reaction for the given query in a specified format.",
      "Docstring": "Retrieve a reaction for the given query in a specified format.\n\nParameters:\n-----------\nquery : str\n    The entry to retrieve in the database.\ncolumns : str, optional\n    Comma-separated list of valid columns to include in the output (e.g., 'rhea-id,equation').\nfrmt : str, optional\n    The format of the returned results; only 'tsv' is currently supported.\nlimit : int, optional\n    Maximum number of records to retrieve.\n\nReturns:\n--------\npandas.DataFrame\n    A DataFrame containing the query result.\n\nExamples:\n--------\n>>> r.query(\"\", columns=\"rhea-id,equation\", limit=10)"
    },
    "search": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search term used to query the Rhea database."
        },
        {
          "name": "columns",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Comma-separated list of valid columns to include in the output (e.g., 'rhea-id,equation')."
        },
        {
          "name": "limit",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "Maximum number of search results to retrieve."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "tsv",
          "optional": true,
          "description": "The format of the search results; options include 'tsv' (default), 'biopax2', and 'cmlreact'."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "A pandas DataFrame containing the search results."
      },
      "api_type": "method",
      "api_name": "bioservices.Rhea.search",
      "api_calling": "bioservices.Rhea.search(query=$, columns=$, limit=$, frmt=$)",
      "example": "r.search(\"caffeine\", columns=\"rhea-id,equation\")",
      "description": "Search for reactions in the Rhea database.",
      "Docstring": "Search for reactions in the Rhea database.\n\nParameters:\n-----------\nquery : str\n    The search term used to query the Rhea database.\ncolumns : str, optional\n    Comma-separated list of valid columns to include in the output (e.g., 'rhea-id,equation').\nlimit : int, optional\n    Maximum number of search results to retrieve.\nfrmt : str, optional\n    The format of the search results; options include 'tsv' (default), 'biopax2', and 'cmlreact'.\n\nReturns:\n--------\npandas.DataFrame\n    A pandas DataFrame containing the search results.\n\nExamples:\n--------\n>>> r.search(\"caffeine\", columns=\"rhea-id,equation\")"
    }
  },
  "unichem": {
    "get_all_src_ids": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "List of source IDs available within UniChem."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_all_src_ids",
      "api_calling": "bioservices.UniChem.get_all_src_ids()",
      "example": "u = UniChem()\nresult = u.get_all_src_ids()",
      "description": "Obtain all src_ids of sources available in UniChem.",
      "Docstring": "Obtain all src_ids of sources available in UniChem.\n\n\nReturns:\n--------\nlist\n    List of source IDs available within UniChem.\n\nExamples:\n--------\n>>> u = UniChem()\nresult = u.get_all_src_ids()"
    },
    "get_compounds": {
      "Parameters": [
        {
          "name": "compound",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "InChI, InChIKey, Name, UCI, or Compound Source ID."
        },
        {
          "name": "source_type",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Identifier type: 'uci', 'inchi', 'inchikey', or 'sourceID' (case-sensitive, e.g. 'chembl')."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "List of matched compounds and their assigned sources."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_compounds",
      "api_calling": "bioservices.UniChem.get_compounds(compound=$, source_type=$)",
      "example": "bioservices.UniChem.get_compounds(compound='CHEMBL12', source_type='chembl')",
      "description": "Get matched compounds information.",
      "Docstring": "Get matched compounds information.\n\nParameters:\n-----------\ncompound : str\n    InChI, InChIKey, Name, UCI, or Compound Source ID.\nsource_type : str\n    Identifier type: 'uci', 'inchi', 'inchikey', or 'sourceID' (case-sensitive, e.g. 'chembl').\n\nReturns:\n--------\nlist\n    List of matched compounds and their assigned sources.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_compounds(compound='CHEMBL12', source_type='chembl')"
    },
    "get_connectivity": {
      "Parameters": [
        {
          "name": "compound",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "InChI, InChIKey, Name, UCI, or Compound Source ID."
        },
        {
          "name": "source_type",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Identifier type: 'uci', 'inchi', 'inchikey', or 'sourceID'."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Connectivity data including 'response', 'searchedCompound', 'sources', 'comparison', 'totalCompounds', and 'totalSources'."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_connectivity",
      "api_calling": "bioservices.UniChem.get_connectivity(compound=$, source_type=$)",
      "example": "bioservices.UniChem.get_connectivity(compound='CHEMBL12', source_type='chembl')",
      "description": "Fetch connectivity data for a given compound.",
      "Docstring": "Fetch connectivity data for a given compound.\n\nParameters:\n-----------\ncompound : str\n    InChI, InChIKey, Name, UCI, or Compound Source ID.\nsource_type : str\n    Identifier type: 'uci', 'inchi', 'inchikey', or 'sourceID'.\n\nReturns:\n--------\ndict\n    Connectivity data including 'response', 'searchedCompound', 'sources', 'comparison', 'totalCompounds', and 'totalSources'.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_connectivity(compound='CHEMBL12', source_type='chembl')"
    },
    "get_id_from_name": {
      "Parameters": [
        {
          "name": "name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid database name, e.g., 'chembl'."
        }
      ],
      "Returns": {
        "type": "int",
        "description": "Source identifier associated with the given database name."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_id_from_name",
      "api_calling": "bioservices.UniChem.get_id_from_name(name=$)",
      "example": "bioservices.UniChem.get_id_from_name(name='chembl')",
      "description": "Return the source ID for a given database name.",
      "Docstring": "Return the source ID for a given database name.\n\nParameters:\n-----------\nname : str\n    A valid database name, e.g., 'chembl'.\n\nReturns:\n--------\nint\n    Source identifier associated with the given database name.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_id_from_name(name='chembl')"
    },
    "get_images": {
      "Parameters": [
        {
          "name": "uci",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "UCI of the compound to retrieve the image for."
        },
        {
          "name": "filename",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Optional filename to save the SVG+XML output."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "SVG+XML string representation of the compound image."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_images",
      "api_calling": "bioservices.UniChem.get_images(uci=$, filename=$)",
      "example": "bioservices.UniChem.get_images(uci='304698', filename='compound.svg')",
      "description": "Return or create the compound image in SVG+XML format.",
      "Docstring": "Return or create the compound image in SVG+XML format.\n\nParameters:\n-----------\nuci : str\n    UCI of the compound to retrieve the image for.\nfilename : str, optional\n    Optional filename to save the SVG+XML output.\n\nReturns:\n--------\nstr\n    SVG+XML string representation of the compound image.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_images(uci='304698', filename='compound.svg')"
    },
    "get_inchi_from_inchikey": {
      "Parameters": [
        {
          "name": "inchikey",
          "type": "str or list of str",
          "default": null,
          "optional": false,
          "description": "InChIKey or list of InChIKeys to search."
        }
      ],
      "Returns": {
        "type": "list or dict",
        "description": "List of InChIs or dict mapping InChIKeys to lists of matching InChIs."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_inchi_from_inchikey",
      "api_calling": "bioservices.UniChem.get_inchi_from_inchikey(inchikey=$)",
      "example": "bioservices.UniChem.get_inchi_from_inchikey(inchikey='AAOVKJBEBIDNHE-UHFFFAOYSA-N')",
      "description": "Retrieve InChIs corresponding to the given InChIKey(s).",
      "Docstring": "Retrieve InChIs corresponding to the given InChIKey(s).\n\nParameters:\n-----------\ninchikey : str or list of str\n    InChIKey or list of InChIKeys to search.\n\nReturns:\n--------\nlist or dict\n    List of InChIs or dict mapping InChIKeys to lists of matching InChIs.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_inchi_from_inchikey(inchikey='AAOVKJBEBIDNHE-UHFFFAOYSA-N')"
    },
    "get_source_info_by_id": {
      "Parameters": [
        {
          "name": "ID",
          "type": "int",
          "default": null,
          "optional": false,
          "description": "Source identifier."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Metadata including UCICount, baseIdUrl, created, description, and other fields."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_source_info_by_id",
      "api_calling": "bioservices.UniChem.get_source_info_by_id(ID=$)",
      "example": "bioservices.UniChem.get_source_info_by_id(ID=10)",
      "description": "Obtain detailed information for a source by its ID.",
      "Docstring": "Obtain detailed information for a source by its ID.\n\nParameters:\n-----------\nID : int\n    Source identifier.\n\nReturns:\n--------\ndict\n    Metadata including UCICount, baseIdUrl, created, description, and other fields.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_source_info_by_id(ID=10)"
    },
    "get_source_info_by_name": {
      "Parameters": [
        {
          "name": "src_name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Name of the source (e.g., 'chembl')."
        }
      ],
      "Returns": {
        "type": "dict or list",
        "description": "Source metadata or list of metadata dicts if multiple matches."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_source_info_by_name",
      "api_calling": "bioservices.UniChem.get_source_info_by_name(src_name=$)",
      "example": "bioservices.UniChem.get_source_info_by_name(src_name='chebi')",
      "description": "Obtain detailed information for a source by its name.",
      "Docstring": "Obtain detailed information for a source by its name.\n\nParameters:\n-----------\nsrc_name : str\n    Name of the source (e.g., 'chembl').\n\nReturns:\n--------\ndict or list\n    Source metadata or list of metadata dicts if multiple matches.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_source_info_by_name(src_name='chebi')"
    },
    "get_sources": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "List of metadata dicts for all sources in UniChem."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_sources",
      "api_calling": "bioservices.UniChem.get_sources()",
      "example": "u.get_sources()",
      "description": "Retrieve information on all sources in UniChem.",
      "Docstring": "Retrieve information on all sources in UniChem.\n\n\nReturns:\n--------\nlist\n    List of metadata dicts for all sources in UniChem.\n\nExamples:\n--------\n>>> u.get_sources()"
    },
    "get_sources_by_inchikey": {
      "Parameters": [
        {
          "name": "inchikey",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "InChIKey or list of InChIKeys."
        }
      ],
      "Returns": {
        "type": "list or dict",
        "description": "List of sources or dict mapping InChIKeys to source lists."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_sources_by_inchikey",
      "api_calling": "bioservices.UniChem.get_sources_by_inchikey(inchikey=$)",
      "example": "bioservices.UniChem.get_sources_by_inchikey(inchikey='GZUITABIAKMVPG-UHFFFAOYSA-N')",
      "description": "Get sources for given InChIKey(s).",
      "Docstring": "Get sources for given InChIKey(s).\n\nParameters:\n-----------\ninchikey : str\n    InChIKey or list of InChIKeys.\n\nReturns:\n--------\nlist or dict\n    List of sources or dict mapping InChIKeys to source lists.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_sources_by_inchikey(inchikey='GZUITABIAKMVPG-UHFFFAOYSA-N')"
    },
    "get_sources_by_inchikey_verbose": {
      "Parameters": [
        {
          "name": "inchikey",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "InChIKey or list of InChIKeys."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Mapping of InChIKeys to detailed source metadata."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_sources_by_inchikey_verbose",
      "api_calling": "bioservices.UniChem.get_sources_by_inchikey_verbose(inchikey=$)",
      "example": "bioservices.UniChem.get_sources_by_inchikey_verbose(inchikey='GZUITABIAKMVPG-UHFFFAOYSA-N')",
      "description": "Retrieve verbose source metadata for given InChIKey(s).",
      "Docstring": "Retrieve verbose source metadata for given InChIKey(s).\n\nParameters:\n-----------\ninchikey : str\n    InChIKey or list of InChIKeys.\n\nReturns:\n--------\ndict\n    Mapping of InChIKeys to detailed source metadata.\n\nExamples:\n--------\n>>> bioservices.UniChem.get_sources_by_inchikey_verbose(inchikey='GZUITABIAKMVPG-UHFFFAOYSA-N')"
    },
    "get_structure": {
      "Parameters": [
        {
          "name": "compound_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Compound identifier."
        },
        {
          "name": "src_id",
          "type": "int or str",
          "default": null,
          "optional": false,
          "description": "Source identifier or name."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Keys 'standardinchi' and 'standardinchikey'."
      },
      "api_type": "method",
      "api_name": "bioservices.UniChem.get_structure",
      "api_calling": "bioservices.UniChem.get_structure(compound_id=$, src_id=$)",
      "example": "u.get_structure('CHEMBL12', 'chembl')",
      "description": "Retrieve structure(s) for a given compound and source.",
      "Docstring": "Retrieve structure(s) for a given compound and source.\n\nParameters:\n-----------\ncompound_id : str\n    Compound identifier.\nsrc_id : int or str\n    Source identifier or name.\n\nReturns:\n--------\ndict\n    Keys 'standardinchi' and 'standardinchikey'.\n\nExamples:\n--------\n>>> u.get_structure('CHEMBL12', 'chembl')"
    },
    "source_ids": {
      "Parameters": [
        {
          "name": "source_ids",
          "type": "dict",
          "default": null,
          "optional": true,
          "description": "Dictionary of source names to their IDs."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Source mapping dictionary."
      },
      "api_type": "other",
      "api_name": "bioservices.UniChem.source_ids",
      "api_calling": "bioservices.UniChem.source_ids",
      "example": "u.source_ids",
      "description": "Container for all source name-to-ID mappings in UniChem.",
      "Docstring": "Container for all source name-to-ID mappings in UniChem.\n\nParameters:\n-----------\nsource_ids : dict, optional\n    Dictionary of source names to their IDs.\n\nReturns:\n--------\ndict\n    Source mapping dictionary.\n\nExamples:\n--------\n>>> u.source_ids"
    }
  },
  "uniprot": {
    "get_df": {
      "Parameters": [
        {
          "name": "entries",
          "type": "list",
          "default": null,
          "optional": false,
          "description": "List of valid UniProt entry names or identifiers. If the list is very large (>200), split it into chunks."
        },
        {
          "name": "nChunk",
          "type": "int",
          "default": 100,
          "optional": true,
          "description": "Size of chunks to query the entries."
        },
        {
          "name": "organism",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Apply an organism filter via organism_id."
        },
        {
          "name": "limit",
          "type": "int",
          "default": 10,
          "optional": true,
          "description": "Limit number of entries per identifier; set to null to return all."
        },
        {
          "name": "columns",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Comma-separated list of columns to include."
        },
        {
          "name": "progress",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Display progress bar during retrieval."
        }
      ],
      "Returns": {
        "type": "pandas.DataFrame",
        "description": "DataFrame indexed by UniProt ID containing the requested annotation columns."
      },
      "api_type": "method",
      "api_name": "bioservices.UniProt.get_df",
      "api_calling": "bioservices.UniProt.get_df(entries=$, nChunk=$, organism=$, limit=$, columns=$, progress=$)",
      "example": "bioservices.UniProt.get_df(entries=['P62988'], nChunk=50, organism=None, limit=10, columns='id,entry name', progress=True)",
      "description": "Given a list of UniProt entries, return a DataFrame with annotation for each entry.",
      "Docstring": "Given a list of UniProt entries, return a DataFrame with annotation for each entry.\n\nParameters:\n-----------\nentries : list\n    List of valid UniProt entry names or identifiers. If the list is very large (>200), split it into chunks.\nnChunk : int, optional\n    Size of chunks to query the entries.\norganism : str, optional\n    Apply an organism filter via organism_id.\nlimit : int, optional\n    Limit number of entries per identifier; set to null to return all.\ncolumns : str, optional\n    Comma-separated list of columns to include.\nprogress : bool, optional\n    Display progress bar during retrieval.\n\nReturns:\n--------\npandas.DataFrame\n    DataFrame indexed by UniProt ID containing the requested annotation columns.\n\nExamples:\n--------\n>>> bioservices.UniProt.get_df(entries=['P62988'], nChunk=50, organism=None, limit=10, columns='id,entry name', progress=True)"
    },
    "get_fasta": {
      "Parameters": [
        {
          "name": "uniprot_id",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A valid UniProt accession identifier (e.g., 'P12345')."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "FASTA-formatted sequence string for the given UniProt ID."
      },
      "api_type": "method",
      "api_name": "bioservices.UniProt.get_fasta",
      "api_calling": "bioservices.UniProt.get_fasta(uniprot_id=$)",
      "example": "bioservices.UniProt.get_fasta(uniprot_id='P12345')",
      "description": "Alias to retrieve() with format 'fasta'. Returns the FASTA sequence for the given UniProt ID.",
      "Docstring": "Alias to retrieve() with format 'fasta'. Returns the FASTA sequence for the given UniProt ID.\n\nParameters:\n-----------\nuniprot_id : str\n    A valid UniProt accession identifier (e.g., 'P12345').\n\nReturns:\n--------\nstr\n    FASTA-formatted sequence string for the given UniProt ID.\n\nExamples:\n--------\n>>> bioservices.UniProt.get_fasta(uniprot_id='P12345')"
    },
    "mapping": {
      "Parameters": [
        {
          "name": "fr",
          "type": "str",
          "default": "UniProtKB_AC-ID",
          "optional": true,
          "description": "Source database identifier; see valid_mapping."
        },
        {
          "name": "to",
          "type": "str",
          "default": "KEGG",
          "optional": true,
          "description": "Target database identifier; see valid_mapping."
        },
        {
          "name": "query",
          "type": "str or list of str",
          "default": "P13368",
          "optional": true,
          "description": "One or more source IDs to map (comma-separated string or list)."
        },
        {
          "name": "polling_interval_seconds",
          "type": "int",
          "default": 3,
          "optional": true,
          "description": "Seconds between job status checks."
        },
        {
          "name": "max_waiting_time",
          "type": "int",
          "default": 100,
          "optional": true,
          "description": "Maximum seconds to wait for the mapping job result."
        },
        {
          "name": "progress",
          "type": "bool",
          "default": true,
          "optional": true,
          "description": "Display progress updates."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Dictionary with 'results' (list of {'from','to'} mappings) and 'failedIds' (list of IDs not found)."
      },
      "api_type": "method",
      "api_name": "bioservices.UniProt.mapping",
      "api_calling": "bioservices.UniProt.mapping(fr=$, to=$, query=$, polling_interval_seconds=$, max_waiting_time=$, progress=$)",
      "example": "bioservices.UniProt.mapping(fr='UniProtKB_AC-ID', to='KEGG', query='P43403', polling_interval_seconds=3, max_waiting_time=100, progress=True)",
      "description": "Map identifiers between source and target databases via UniProt ID mapping service.",
      "Docstring": "Map identifiers between source and target databases via UniProt ID mapping service.\n\nParameters:\n-----------\nfr : str, optional\n    Source database identifier; see valid_mapping.\nto : str, optional\n    Target database identifier; see valid_mapping.\nquery : str or list of str, optional\n    One or more source IDs to map (comma-separated string or list).\npolling_interval_seconds : int, optional\n    Seconds between job status checks.\nmax_waiting_time : int, optional\n    Maximum seconds to wait for the mapping job result.\nprogress : bool, optional\n    Display progress updates.\n\nReturns:\n--------\ndict\n    Dictionary with 'results' (list of {'from','to'} mappings) and 'failedIds' (list of IDs not found).\n\nExamples:\n--------\n>>> bioservices.UniProt.mapping(fr='UniProtKB_AC-ID', to='KEGG', query='P43403', polling_interval_seconds=3, max_waiting_time=100, progress=True)"
    },
    "quick_search": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Query string for UniProt database."
        },
        {
          "name": "limit",
          "type": "int",
          "default": 1,
          "optional": true,
          "description": "Number of results to return; default is 1."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Dictionary of search results (headers and corresponding data)."
      },
      "api_type": "method",
      "api_name": "bioservices.UniProt.quick_search",
      "api_calling": "bioservices.UniProt.quick_search(query=$, limit=$)",
      "example": "bioservices.UniProt.quick_search(query='P43403', limit=1)",
      "description": "Specialised alias for search() returning a limited number of results.",
      "Docstring": "Specialised alias for search() returning a limited number of results.\n\nParameters:\n-----------\nquery : str\n    Query string for UniProt database.\nlimit : int, optional\n    Number of results to return; default is 1.\n\nReturns:\n--------\ndict\n    Dictionary of search results (headers and corresponding data).\n\nExamples:\n--------\n>>> bioservices.UniProt.quick_search(query='P43403', limit=1)"
    },
    "retrieve": {
      "Parameters": [
        {
          "name": "uniprot_id",
          "type": "str or list of str",
          "default": null,
          "optional": false,
          "description": "UniProtKB, UniRef, UniParc, or Taxonomy ID(s)."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "json",
          "optional": true,
          "description": "Output format: 'xml','txt','fasta','gff','rdf','json'."
        },
        {
          "name": "database",
          "type": "str",
          "default": "uniprot",
          "optional": true,
          "description": "Database to query: 'uniprot','uniparc','uniref','taxonomy'."
        },
        {
          "name": "include",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Include additional RDF data when frmt='rdf'."
        }
      ],
      "Returns": {
        "type": "str, list, or dict",
        "description": "Retrieved data formatted as string, list, or dict depending on frmt."
      },
      "api_type": "method",
      "api_name": "bioservices.UniProt.retrieve",
      "api_calling": "bioservices.UniProt.retrieve(uniprot_id=$, frmt=$, database=$, include=$)",
      "example": "bioservices.UniProt.retrieve(uniprot_id='P09958', frmt='txt', database='uniprot', include=False)",
      "description": "Retrieve data for UniProt ID(s) in specified format.",
      "Docstring": "Retrieve data for UniProt ID(s) in specified format.\n\nParameters:\n-----------\nuniprot_id : str or list of str\n    UniProtKB, UniRef, UniParc, or Taxonomy ID(s).\nfrmt : str, optional\n    Output format: 'xml','txt','fasta','gff','rdf','json'.\ndatabase : str, optional\n    Database to query: 'uniprot','uniparc','uniref','taxonomy'.\ninclude : bool, optional\n    Include additional RDF data when frmt='rdf'.\n\nReturns:\n--------\nstr, list, or dict\n    Retrieved data formatted as string, list, or dict depending on frmt.\n\nExamples:\n--------\n>>> bioservices.UniProt.retrieve(uniprot_id='P09958', frmt='txt', database='uniprot', include=False)"
    },
    "search": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Valid UniProt search query string."
        },
        {
          "name": "frmt",
          "type": "str",
          "default": "tsv",
          "optional": true,
          "description": "Format: 'xlsx','fasta','gff','tsv','json'."
        },
        {
          "name": "columns",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Comma-separated output columns; valid for 'tsv' or 'xlsx'."
        },
        {
          "name": "include_isoforms",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Include isoform sequences when frmt='fasta'."
        },
        {
          "name": "sort",
          "type": "str",
          "default": "score",
          "optional": true,
          "description": "Sort criteria; set to null to disable."
        },
        {
          "name": "compress",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Compress output data."
        },
        {
          "name": "limit",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "Maximum number of entries to return."
        },
        {
          "name": "size",
          "type": "int",
          "default": 25,
          "optional": true,
          "description": "Number of entries to fetch per page."
        },
        {
          "name": "database",
          "type": "str",
          "default": "uniprotkb",
          "optional": true,
          "description": "Database to query: 'uniprotkb'."
        },
        {
          "name": "progress",
          "type": "bool",
          "default": false,
          "optional": true,
          "description": "Show progress bar during retrieval."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "Concatenated search results formatted per frmt parameter."
      },
      "api_type": "method",
      "api_name": "bioservices.UniProt.search",
      "api_calling": "bioservices.UniProt.search(query=$, frmt=$, columns=$, include_isoforms=$, sort=$, compress=$, limit=$, size=$, database=$, progress=$)",
      "example": "bioservices.UniProt.search(query='P12345+taxonomy_id:9606', frmt='json', limit=100)",
      "description": "Query the UniProt search service and return results in chosen format.",
      "Docstring": "Query the UniProt search service and return results in chosen format.\n\nParameters:\n-----------\nquery : str\n    Valid UniProt search query string.\nfrmt : str, optional\n    Format: 'xlsx','fasta','gff','tsv','json'.\ncolumns : str, optional\n    Comma-separated output columns; valid for 'tsv' or 'xlsx'.\ninclude_isoforms : bool, optional\n    Include isoform sequences when frmt='fasta'.\nsort : str, optional\n    Sort criteria; set to null to disable.\ncompress : bool, optional\n    Compress output data.\nlimit : int, optional\n    Maximum number of entries to return.\nsize : int, optional\n    Number of entries to fetch per page.\ndatabase : str, optional\n    Database to query: 'uniprotkb'.\nprogress : bool, optional\n    Show progress bar during retrieval.\n\nReturns:\n--------\nstr\n    Concatenated search results formatted per frmt parameter.\n\nExamples:\n--------\n>>> bioservices.UniProt.search(query='P12345+taxonomy_id:9606', frmt='json', limit=100)"
    },
    "uniref": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "Query string for UniRef service (e.g., 'Q03063')."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "JSON-like dictionary response from the UniRef service."
      },
      "api_type": "method",
      "api_name": "bioservices.UniProt.uniref",
      "api_calling": "bioservices.UniProt.uniref(query=$)",
      "example": "bioservices.UniProt.uniref(query='Q03063')",
      "description": "Alias to retrieve() for the UniRef service; returns a JSON dictionary for the given query.",
      "Docstring": "Alias to retrieve() for the UniRef service; returns a JSON dictionary for the given query.\n\nParameters:\n-----------\nquery : str\n    Query string for UniRef service (e.g., 'Q03063').\n\nReturns:\n--------\ndict\n    JSON-like dictionary response from the UniRef service.\n\nExamples:\n--------\n>>> bioservices.UniProt.uniref(query='Q03063')"
    },
    "valid_mapping": {
      "Parameters": [],
      "Returns": {
        "type": "dict",
        "description": "Dictionary of valid mapping identifiers supported by the UniProt service."
      },
      "api_type": "property",
      "api_name": "bioservices.UniProt.valid_mapping",
      "api_calling": "bioservices.UniProt.valid_mapping",
      "example": "",
      "description": "Property listing valid mapping identifiers supported by the UniProt service.",
      "Docstring": "Property listing valid mapping identifiers supported by the UniProt service.\n\n\nReturns:\n--------\ndict\n    Dictionary of valid mapping identifiers supported by the UniProt service.\n\nExamples:\n--------\n>>> "
    }
  },
  "wikipathways": {
    "createPathway": {
      "Parameters": [
        {
          "name": "gpml",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The GPML code."
        },
        {
          "name": "auth",
          "type": "object",
          "default": null,
          "optional": false,
          "description": "Authentication info (WSAuth)."
        }
      ],
      "Returns": {
        "type": "WSPathwayInfo",
        "description": "The pathway info for the created pathway (containing identifier, revision, etc.)."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.createPathway",
      "api_calling": "s.createPathway(gpml=$, auth=$)",
      "example": "s.createPathway(gpml='<GPML_CODE>', auth=authInfo)",
      "description": "Create a new pathway on the WikiPathways website with a given GPML code.",
      "Docstring": "Create a new pathway on the WikiPathways website with a given GPML code.\n\nParameters:\n-----------\ngpml : str\n    The GPML code.\nauth : object\n    Authentication info (WSAuth).\n\nReturns:\n--------\nWSPathwayInfo\n    The pathway info for the created pathway (containing identifier, revision, etc.).\n\nExamples:\n--------\n>>> s.createPathway(gpml='<GPML_CODE>', auth=authInfo)"
    },
    "findInteractions": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The name of an entity to find interactions for (e.g. 'P53')."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "List of dictionaries representing interactions."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.findInteractions",
      "api_calling": "s.findInteractions(query=$)",
      "example": "s.findInteractions(\"P53\")",
      "description": "Find interactions defined in WikiPathways pathways.",
      "Docstring": "Find interactions defined in WikiPathways pathways.\n\nParameters:\n-----------\nquery : str\n    The name of an entity to find interactions for (e.g. 'P53').\n\nReturns:\n--------\nlist\n    List of dictionaries representing interactions.\n\nExamples:\n--------\n>>> s.findInteractions(\"P53\")"
    },
    "findPathwaysByLiterature": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A PubMed ID, author name, or title keyword."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Dictionary with Pathway as keys."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.findPathwaysByLiterature",
      "api_calling": "s.findPathwaysByLiterature(query=$)",
      "example": "s.findPathwaysByLiterature(18651794)",
      "description": "Find pathways by their literature references.",
      "Docstring": "Find pathways by their literature references.\n\nParameters:\n-----------\nquery : str\n    A PubMed ID, author name, or title keyword.\n\nReturns:\n--------\ndict\n    Dictionary with Pathway as keys.\n\nExamples:\n--------\n>>> s.findPathwaysByLiterature(18651794)"
    },
    "findPathwaysByText": {
      "Parameters": [
        {
          "name": "query",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The search query (e.g. 'apoptosis' or 'p53')."
        },
        {
          "name": "species",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "Species to limit the search to (leave blank to search all species)."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "Array of WSSearchResult \u2013 an array of search results."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.findPathwaysByText",
      "api_calling": "s.findPathwaysByText(query=$, species=$)",
      "example": "s.findPathwaysByText(query=\"p53 OR mapk\", species=\"Homo sapiens\")",
      "description": "Find pathways using a textual search on the description and text labels of the pathway objects.",
      "Docstring": "Find pathways using a textual search on the description and text labels of the pathway objects.\n\nParameters:\n-----------\nquery : str\n    The search query (e.g. 'apoptosis' or 'p53').\nspecies : str, optional\n    Species to limit the search to (leave blank to search all species).\n\nReturns:\n--------\nlist\n    Array of WSSearchResult \u2013 an array of search results.\n\nExamples:\n--------\n>>> s.findPathwaysByText(query=\"p53 OR mapk\", species=\"Homo sapiens\")"
    },
    "findPathwaysByXref": {
      "Parameters": [
        {
          "name": "ids",
          "type": "str or list",
          "default": null,
          "optional": false,
          "description": "One or more DataNode identifiers (e.g. 'P45985')."
        },
        {
          "name": "codes",
          "type": "str or list",
          "default": null,
          "optional": true,
          "description": "Database codes to restrict the search (e.g. 'L' for entrez gene)."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "Dictionary of pathways found by xref."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.findPathwaysByXref",
      "api_calling": "s.findPathwaysByXref(ids=$, codes=$)",
      "example": "s.findPathwaysByXref(ids=\"P45985\")",
      "description": "Find pathways by searching on the external references of DataNodes.",
      "Docstring": "Find pathways by searching on the external references of DataNodes.\n\nParameters:\n-----------\nids : str or list\n    One or more DataNode identifiers (e.g. 'P45985').\ncodes : str or list, optional\n    Database codes to restrict the search (e.g. 'L' for entrez gene).\n\nReturns:\n--------\ndict\n    Dictionary of pathways found by xref.\n\nExamples:\n--------\n>>> s.findPathwaysByXref(ids=\"P45985\")"
    },
    "getColoredPathway": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        },
        {
          "name": "fileType",
          "type": "str",
          "default": "svg",
          "optional": true,
          "description": "The image type ('svg', 'pdf' or 'png'; svg returned by default)."
        },
        {
          "name": "revision",
          "type": "int",
          "default": 0,
          "optional": true,
          "description": "The revision number of the pathway (0 for most recent)."
        },
        {
          "name": "color",
          "type": "unknown",
          "default": null,
          "optional": true,
          "description": "Optional color parameters (not yet implemented)."
        },
        {
          "name": "graphId",
          "type": "unknown",
          "default": null,
          "optional": true,
          "description": "Optional graph identifier (not yet implemented)."
        }
      ],
      "Returns": {
        "type": "bytes",
        "description": "Binary form of the colored pathway image."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getColoredPathway",
      "api_calling": "s.getColoredPathway(pathwayId=$, fileType=$, revision=$, color=$, graphId=$)",
      "example": "s.getColoredPathway(pathwayId=\"WP4\", fileType=\"svg\")",
      "description": "Get a colored image version of the pathway.",
      "Docstring": "Get a colored image version of the pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\nfileType : str, optional\n    The image type ('svg', 'pdf' or 'png'; svg returned by default).\nrevision : int, optional\n    The revision number of the pathway (0 for most recent).\ncolor : unknown, optional\n    Optional color parameters (not yet implemented).\ngraphId : unknown, optional\n    Optional graph identifier (not yet implemented).\n\nReturns:\n--------\nbytes\n    Binary form of the colored pathway image.\n\nExamples:\n--------\n>>> s.getColoredPathway(pathwayId=\"WP4\", fileType=\"svg\")"
    },
    "getCurationTags": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "Array of WSCurationTag."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getCurationTags",
      "api_calling": "s.getCurationTags(pathwayId=$)",
      "example": "s.getCurationTags(\"WP4\")",
      "description": "Get all curation tags for the given pathway.",
      "Docstring": "Get all curation tags for the given pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\n\nReturns:\n--------\nlist\n    Array of WSCurationTag.\n\nExamples:\n--------\n>>> s.getCurationTags(\"WP4\")"
    },
    "getCurationTagsByName": {
      "Parameters": [
        {
          "name": "tagName",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The curation tag name."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "Array of WSCurationTag."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getCurationTagsByName",
      "api_calling": "s.getCurationTagsByName(tagName=$)",
      "example": "s.getCurationTagsByName(\"Curation:FeaturedPathway\")",
      "description": "Get all curation tags for the given tag name.",
      "Docstring": "Get all curation tags for the given tag name.\n\nParameters:\n-----------\ntagName : str\n    The curation tag name.\n\nReturns:\n--------\nlist\n    Array of WSCurationTag.\n\nExamples:\n--------\n>>> s.getCurationTagsByName(\"Curation:FeaturedPathway\")"
    },
    "getOntologyTermsByPathway": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "Array of WSOntologyTerm."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getOntologyTermsByPathway",
      "api_calling": "s.getOntologyTermsByPathway(pathwayId=$)",
      "example": "s.getOntologyTermsByPathway(\"WP4\")",
      "description": "Get a list of ontology terms for a given pathway.",
      "Docstring": "Get a list of ontology terms for a given pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\n\nReturns:\n--------\nlist\n    Array of WSOntologyTerm.\n\nExamples:\n--------\n>>> s.getOntologyTermsByPathway(\"WP4\")"
    },
    "getPathway": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        },
        {
          "name": "revision",
          "type": "int",
          "default": 0,
          "optional": true,
          "description": "The revision number (0 for most recent)."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "The pathway as a dictionary in GPML format."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getPathway",
      "api_calling": "s.getPathway(pathwayId=$, revision=$)",
      "example": "s.getPathway(\"WP2320\", revision=0)",
      "description": "Download a pathway from WikiPathways.",
      "Docstring": "Download a pathway from WikiPathways.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\nrevision : int, optional\n    The revision number (0 for most recent).\n\nReturns:\n--------\ndict\n    The pathway as a dictionary in GPML format.\n\nExamples:\n--------\n>>> s.getPathway(\"WP2320\", revision=0)"
    },
    "getPathwayHistory": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        },
        {
          "name": "date",
          "type": "str or int",
          "default": null,
          "optional": false,
          "description": "Timestamp filter (YYYYMMDDHHMMSS)."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "The revision history items."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getPathwayHistory",
      "api_calling": "s.getPathwayHistory(pathwayId=$, date=$)",
      "example": "s.getPathwayHistory(\"WP4\", 20110101000000)",
      "description": "Get the revision history of a pathway.",
      "Docstring": "Get the revision history of a pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\ndate : str or int\n    Timestamp filter (YYYYMMDDHHMMSS).\n\nReturns:\n--------\nlist\n    The revision history items.\n\nExamples:\n--------\n>>> s.getPathwayHistory(\"WP4\", 20110101000000)"
    },
    "getPathwayInfo": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        }
      ],
      "Returns": {
        "type": "dict",
        "description": "The pathway info."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getPathwayInfo",
      "api_calling": "s.getPathwayInfo(pathwayId=$)",
      "example": "s.getPathwayInfo(\"WP2320\")",
      "description": "Get some general info about the pathway.",
      "Docstring": "Get some general info about the pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\n\nReturns:\n--------\ndict\n    The pathway info.\n\nExamples:\n--------\n>>> s.getPathwayInfo(\"WP2320\")"
    },
    "getPathwaysByOntologyTerm": {
      "Parameters": [
        {
          "name": "terms",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The ontology term identifier."
        }
      ],
      "Returns": {
        "type": "DataFrame",
        "description": "DataFrame with pathways information."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getPathwaysByOntologyTerm",
      "api_calling": "s.getPathwaysByOntologyTerm(terms=$)",
      "example": "s.getPathwaysByOntologyTerm(\"PW:0000724\")",
      "description": "Get a list of pathways tagged with a given ontology term.",
      "Docstring": "Get a list of pathways tagged with a given ontology term.\n\nParameters:\n-----------\nterms : str\n    The ontology term identifier.\n\nReturns:\n--------\nDataFrame\n    DataFrame with pathways information.\n\nExamples:\n--------\n>>> s.getPathwaysByOntologyTerm(\"PW:0000724\")"
    },
    "getPathwaysByParentOntologyTerm": {
      "Parameters": [
        {
          "name": "term",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The parent ontology term identifier."
        }
      ],
      "Returns": {
        "type": "list",
        "description": "List of WSPathwayInfo."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getPathwaysByParentOntologyTerm",
      "api_calling": "s.getPathwaysByParentOntologyTerm(term=$)",
      "example": "s.getPathwaysByParentOntologyTerm(\"GO:0008150\")",
      "description": "Get a list of pathways tagged with any ontology term that is the child of the given ontology term.",
      "Docstring": "Get a list of pathways tagged with any ontology term that is the child of the given ontology term.\n\nParameters:\n-----------\nterm : str\n    The parent ontology term identifier.\n\nReturns:\n--------\nlist\n    List of WSPathwayInfo.\n\nExamples:\n--------\n>>> s.getPathwaysByParentOntologyTerm(\"GO:0008150\")"
    },
    "getRecentChanges": {
      "Parameters": [
        {
          "name": "timestamp",
          "type": "str or int",
          "default": null,
          "optional": false,
          "description": "Only get changes after this time (YYYYMMDDHHMMSS)."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "XML string of changed pathways."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.getRecentChanges",
      "api_calling": "s.getRecentChanges(timestamp=$)",
      "example": "s.getRecentChanges(20110101000000)",
      "description": "Get the recently changed pathways.",
      "Docstring": "Get the recently changed pathways.\n\nParameters:\n-----------\ntimestamp : str or int\n    Only get changes after this time (YYYYMMDDHHMMSS).\n\nReturns:\n--------\nstr\n    XML string of changed pathways.\n\nExamples:\n--------\n>>> s.getRecentChanges(20110101000000)"
    },
    "listOrganisms": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "List of all available organisms."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.listOrganisms",
      "api_calling": "s.listOrganisms()",
      "example": "s.listOrganisms()",
      "description": "Get a list of all available organisms.",
      "Docstring": "Get a list of all available organisms.\n\n\nReturns:\n--------\nlist\n    List of all available organisms.\n\nExamples:\n--------\n>>> s.listOrganisms()"
    },
    "listPathways": {
      "Parameters": [
        {
          "name": "organism",
          "type": "str",
          "default": null,
          "optional": true,
          "description": "If provided, filter pathways by this organism."
        }
      ],
      "Returns": {
        "type": "DataFrame",
        "description": "DataFrame of available pathways (index are pathway IDs)."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.listPathways",
      "api_calling": "s.listPathways(organism=$)",
      "example": "s.listPathways(organism=\"Homo sapiens\")",
      "description": "Get a list of all available pathways.",
      "Docstring": "Get a list of all available pathways.\n\nParameters:\n-----------\norganism : str, optional\n    If provided, filter pathways by this organism.\n\nReturns:\n--------\nDataFrame\n    DataFrame of available pathways (index are pathway IDs).\n\nExamples:\n--------\n>>> s.listPathways(organism=\"Homo sapiens\")"
    },
    "login": {
      "Parameters": [
        {
          "name": "usrname",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The WikiPathways username."
        },
        {
          "name": "password",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The WikiPathways password."
        }
      ],
      "Returns": {
        "type": "str",
        "description": "Authentication code for this session."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.login",
      "api_calling": "s.login(usrname=$, password=$)",
      "example": "s.login(usrname=\"example_user\", password=\"example_pass\")",
      "description": "Start a logged in session using an existing WikiPathways account.",
      "Docstring": "Start a logged in session using an existing WikiPathways account.\n\nParameters:\n-----------\nusrname : str\n    The WikiPathways username.\npassword : str\n    The WikiPathways password.\n\nReturns:\n--------\nstr\n    Authentication code for this session.\n\nExamples:\n--------\n>>> s.login(usrname=\"example_user\", password=\"example_pass\")"
    },
    "organism": {
      "Parameters": [],
      "Returns": {
        "type": "str",
        "description": "Read/write attribute for the organism (default 'Homo sapiens')."
      },
      "api_type": "property",
      "api_name": "bioservices.wikipathways.organism",
      "api_calling": "s.organism",
      "example": "current = s.organism",
      "description": "Read/write attribute for the organism. Default is 'Homo sapiens'.",
      "Docstring": "Read/write attribute for the organism. Default is 'Homo sapiens'.\n\n\nReturns:\n--------\nstr\n    Read/write attribute for the organism (default 'Homo sapiens').\n\nExamples:\n--------\n>>> current = s.organism"
    },
    "organisms": {
      "Parameters": [],
      "Returns": {
        "type": "list",
        "description": "List of all available organisms."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.organisms",
      "api_calling": "s.organisms()",
      "example": "s.organisms()",
      "description": "Get a list of all available organisms.",
      "Docstring": "Get a list of all available organisms.\n\n\nReturns:\n--------\nlist\n    List of all available organisms.\n\nExamples:\n--------\n>>> s.organisms()"
    },
    "removeCurationTag": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        },
        {
          "name": "name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The curation tag name to remove."
        }
      ],
      "Returns": {
        "type": "bool",
        "description": "True if the operation was successful."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.removeCurationTag",
      "api_calling": "s.removeCurationTag(pathwayId=$, name=$)",
      "example": "s.removeCurationTag(\"WP4\", \"Curation:ExampleTag\")",
      "description": "Remove a curation tag from a pathway.",
      "Docstring": "Remove a curation tag from a pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\nname : str\n    The curation tag name to remove.\n\nReturns:\n--------\nbool\n    True if the operation was successful.\n\nExamples:\n--------\n>>> s.removeCurationTag(\"WP4\", \"Curation:ExampleTag\")"
    },
    "saveCurationTag": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        },
        {
          "name": "name",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The curation tag name to apply."
        },
        {
          "name": "revision",
          "type": "int",
          "default": null,
          "optional": true,
          "description": "The revision number (most recent if None)."
        }
      ],
      "Returns": {
        "type": "bool",
        "description": "True if the curation tag was successfully saved."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.saveCurationTag",
      "api_calling": "s.saveCurationTag(pathwayId=$, name=$, revision=$)",
      "example": "s.saveCurationTag(\"WP1234\", \"Curation:Approved\", revision=None)",
      "description": "Apply a curation tag to a pathway.",
      "Docstring": "Apply a curation tag to a pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\nname : str\n    The curation tag name to apply.\nrevision : int, optional\n    The revision number (most recent if None).\n\nReturns:\n--------\nbool\n    True if the curation tag was successfully saved.\n\nExamples:\n--------\n>>> s.saveCurationTag(\"WP1234\", \"Curation:Approved\", revision=None)"
    },
    "savePathwayAs": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        },
        {
          "name": "filename",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The name of the file (extension determines format)."
        },
        {
          "name": "revision",
          "type": "int",
          "default": 0,
          "optional": true,
          "description": "The revision number (0 for most recent)."
        },
        {
          "name": "display",
          "type": "bool",
          "default": true,
          "optional": true,
          "description": "If True, the pathway will be displayed in the browser."
        }
      ],
      "Returns": {
        "type": "None",
        "description": "None"
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.savePathwayAs",
      "api_calling": "s.savePathwayAs(pathwayId=$, filename=$, revision=$, display=$)",
      "example": "s.savePathwayAs(\"WP2320\", \"pathway.png\", revision=0, display=True)",
      "description": "Save a pathway.",
      "Docstring": "Save a pathway.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\nfilename : str\n    The name of the file (extension determines format).\nrevision : int, optional\n    The revision number (0 for most recent).\ndisplay : bool, optional\n    If True, the pathway will be displayed in the browser.\n\nReturns:\n--------\nNone\n    None\n\nExamples:\n--------\n>>> s.savePathwayAs(\"WP2320\", \"pathway.png\", revision=0, display=True)"
    },
    "showPathwayInBrowser": {
      "Parameters": [
        {
          "name": "pathwayId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        }
      ],
      "Returns": {
        "type": "None",
        "description": "None"
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.showPathwayInBrowser",
      "api_calling": "s.showPathwayInBrowser(pathwayId=$)",
      "example": "s.showPathwayInBrowser(\"WP554\")",
      "description": "Show a given Pathway in your default web browser.",
      "Docstring": "Show a given Pathway in your default web browser.\n\nParameters:\n-----------\npathwayId : str\n    The pathway identifier.\n\nReturns:\n--------\nNone\n    None\n\nExamples:\n--------\n>>> s.showPathwayInBrowser(\"WP554\")"
    },
    "updatePathway": {
      "Parameters": [
        {
          "name": "pwId",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The pathway identifier."
        },
        {
          "name": "description",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "A description of the modifications."
        },
        {
          "name": "gpml",
          "type": "str",
          "default": null,
          "optional": false,
          "description": "The updated GPML code."
        },
        {
          "name": "revision",
          "type": "int",
          "default": 0,
          "optional": true,
          "description": "The revision number (used to prevent conflicts)."
        },
        {
          "name": "WSAuth_auth",
          "type": "object",
          "default": null,
          "optional": false,
          "description": "Authentication info (WSAuth)."
        }
      ],
      "Returns": {
        "type": "bool",
        "description": "True if the pathway was updated successfully."
      },
      "api_type": "method",
      "api_name": "bioservices.wikipathways.updatePathway",
      "api_calling": "s.updatePathway(pwId=$, description=$, gpml=$, revision=$, WSAuth_auth=$)",
      "example": "s.updatePathway(pwId=\"WP1234\", description=\"Updated nodes\", gpml=gpmlCode, revision=1, WSAuth_auth=authInfo)",
      "description": "Update a pathway on the WikiPathways website with a given GPML code.",
      "Docstring": "Update a pathway on the WikiPathways website with a given GPML code.\n\nParameters:\n-----------\npwId : str\n    The pathway identifier.\ndescription : str\n    A description of the modifications.\ngpml : str\n    The updated GPML code.\nrevision : int, optional\n    The revision number (used to prevent conflicts).\nWSAuth_auth : object\n    Authentication info (WSAuth).\n\nReturns:\n--------\nbool\n    True if the pathway was updated successfully.\n\nExamples:\n--------\n>>> s.updatePathway(pwId=\"WP1234\", description=\"Updated nodes\", gpml=gpmlCode, revision=1, WSAuth_auth=authInfo)"
    }
  }
}